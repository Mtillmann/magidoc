var Xe=Object.defineProperty;var Ze=(e,t,n)=>t in e?Xe(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;var me=(e,t,n)=>(Ze(e,typeof t!="symbol"?t+"":t,n),n);import{G as N,T as ve,f as W,g as ge,h as et,j as tt,k as w,l as h,m as Ae,K as c,O as x,L as nt,n as B,p as P,o as C,q as st,t as Oe,r as it,s as rt,u as l,v as D,w as X,e as q,x as be,i as ce,y as ue,z as F,A as g,B as le,c as at,a as R,b as k,d as K,C as ot,D as ct,E as pt,F as Y,H as ut,I as lt,J as dt,M as ht,N as ft,P as mt,Q as yt,R as Tt,_ as U}from"./definition-27764e35.js";import{ab as we}from"./paths-6a081cbd.js";import{u as Le}from"./_commonjsHelpers-15ca5a41.js";function I(e,t,n){return new N(`Syntax Error: ${n}`,{source:e,positions:[t]})}var d;(function(e){e.QUERY="QUERY",e.MUTATION="MUTATION",e.SUBSCRIPTION="SUBSCRIPTION",e.FIELD="FIELD",e.FRAGMENT_DEFINITION="FRAGMENT_DEFINITION",e.FRAGMENT_SPREAD="FRAGMENT_SPREAD",e.INLINE_FRAGMENT="INLINE_FRAGMENT",e.VARIABLE_DEFINITION="VARIABLE_DEFINITION",e.SCHEMA="SCHEMA",e.SCALAR="SCALAR",e.OBJECT="OBJECT",e.FIELD_DEFINITION="FIELD_DEFINITION",e.ARGUMENT_DEFINITION="ARGUMENT_DEFINITION",e.INTERFACE="INTERFACE",e.UNION="UNION",e.ENUM="ENUM",e.ENUM_VALUE="ENUM_VALUE",e.INPUT_OBJECT="INPUT_OBJECT",e.INPUT_FIELD_DEFINITION="INPUT_FIELD_DEFINITION"})(d||(d={}));var a;(function(e){e.SOF="<SOF>",e.EOF="<EOF>",e.BANG="!",e.DOLLAR="$",e.AMP="&",e.PAREN_L="(",e.PAREN_R=")",e.SPREAD="...",e.COLON=":",e.EQUALS="=",e.AT="@",e.BRACKET_L="[",e.BRACKET_R="]",e.BRACE_L="{",e.PIPE="|",e.BRACE_R="}",e.NAME="Name",e.INT="Int",e.FLOAT="Float",e.STRING="String",e.BLOCK_STRING="BlockString",e.COMMENT="Comment"})(a||(a={}));class Et{constructor(t){const n=new ve(a.SOF,0,0,0,0);this.source=t,this.lastToken=n,this.token=n,this.line=1,this.lineStart=0}get[Symbol.toStringTag](){return"Lexer"}advance(){return this.lastToken=this.token,this.token=this.lookahead()}lookahead(){let t=this.token;if(t.kind!==a.EOF)do if(t.next)t=t.next;else{const n=It(this,t.end);t.next=n,n.prev=t,t=n}while(t.kind===a.COMMENT);return t}}function Nt(e){return e===a.BANG||e===a.DOLLAR||e===a.AMP||e===a.PAREN_L||e===a.PAREN_R||e===a.SPREAD||e===a.COLON||e===a.EQUALS||e===a.AT||e===a.BRACKET_L||e===a.BRACKET_R||e===a.BRACE_L||e===a.PIPE||e===a.BRACE_R}function j(e){return e>=0&&e<=55295||e>=57344&&e<=1114111}function Z(e,t){return xe(e.charCodeAt(t))&&De(e.charCodeAt(t+1))}function xe(e){return e>=55296&&e<=56319}function De(e){return e>=56320&&e<=57343}function S(e,t){const n=e.source.body.codePointAt(t);if(n===void 0)return a.EOF;if(n>=32&&n<=126){const i=String.fromCodePoint(n);return i==='"'?`'"'`:`"${i}"`}return"U+"+n.toString(16).toUpperCase().padStart(4,"0")}function E(e,t,n,i,s){const r=e.line,p=1+n-e.lineStart;return new ve(t,n,i,r,p,s)}function It(e,t){const n=e.source.body,i=n.length;let s=t;for(;s<i;){const r=n.charCodeAt(s);switch(r){case 65279:case 9:case 32:case 44:++s;continue;case 10:++s,++e.line,e.lineStart=s;continue;case 13:n.charCodeAt(s+1)===10?s+=2:++s,++e.line,e.lineStart=s;continue;case 35:return _t(e,s);case 33:return E(e,a.BANG,s,s+1);case 36:return E(e,a.DOLLAR,s,s+1);case 38:return E(e,a.AMP,s,s+1);case 40:return E(e,a.PAREN_L,s,s+1);case 41:return E(e,a.PAREN_R,s,s+1);case 46:if(n.charCodeAt(s+1)===46&&n.charCodeAt(s+2)===46)return E(e,a.SPREAD,s,s+3);break;case 58:return E(e,a.COLON,s,s+1);case 61:return E(e,a.EQUALS,s,s+1);case 64:return E(e,a.AT,s,s+1);case 91:return E(e,a.BRACKET_L,s,s+1);case 93:return E(e,a.BRACKET_R,s,s+1);case 123:return E(e,a.BRACE_L,s,s+1);case 124:return E(e,a.PIPE,s,s+1);case 125:return E(e,a.BRACE_R,s,s+1);case 34:return n.charCodeAt(s+1)===34&&n.charCodeAt(s+2)===34?wt(e,s):gt(e,s)}if(W(r)||r===45)return vt(e,s,r);if(ge(r))return Lt(e,s);throw I(e.source,s,r===39?`Unexpected single quote character ('), did you mean to use a double quote (")?`:j(r)||Z(n,s)?`Unexpected character: ${S(e,s)}.`:`Invalid character: ${S(e,s)}.`)}return E(e,a.EOF,i,i)}function _t(e,t){const n=e.source.body,i=n.length;let s=t+1;for(;s<i;){const r=n.charCodeAt(s);if(r===10||r===13)break;if(j(r))++s;else if(Z(n,s))s+=2;else break}return E(e,a.COMMENT,t,s,n.slice(t+1,s))}function vt(e,t,n){const i=e.source.body;let s=t,r=n,p=!1;if(r===45&&(r=i.charCodeAt(++s)),r===48){if(r=i.charCodeAt(++s),W(r))throw I(e.source,s,`Invalid number, unexpected digit after 0: ${S(e,s)}.`)}else s=se(e,s,r),r=i.charCodeAt(s);if(r===46&&(p=!0,r=i.charCodeAt(++s),s=se(e,s,r),r=i.charCodeAt(s)),(r===69||r===101)&&(p=!0,r=i.charCodeAt(++s),(r===43||r===45)&&(r=i.charCodeAt(++s)),s=se(e,s,r),r=i.charCodeAt(s)),r===46||ge(r))throw I(e.source,s,`Invalid number, expected digit but got: ${S(e,s)}.`);return E(e,p?a.FLOAT:a.INT,t,s,i.slice(t,s))}function se(e,t,n){if(!W(n))throw I(e.source,t,`Invalid number, expected digit but got: ${S(e,t)}.`);const i=e.source.body;let s=t+1;for(;W(i.charCodeAt(s));)++s;return s}function gt(e,t){const n=e.source.body,i=n.length;let s=t+1,r=s,p="";for(;s<i;){const f=n.charCodeAt(s);if(f===34)return p+=n.slice(r,s),E(e,a.STRING,t,s+1,p);if(f===92){p+=n.slice(r,s);const y=n.charCodeAt(s+1)===117?n.charCodeAt(s+2)===123?At(e,s):Ot(e,s):bt(e,s);p+=y.value,s+=y.size,r=s;continue}if(f===10||f===13)break;if(j(f))++s;else if(Z(n,s))s+=2;else throw I(e.source,s,`Invalid character within String: ${S(e,s)}.`)}throw I(e.source,s,"Unterminated string.")}function At(e,t){const n=e.source.body;let i=0,s=3;for(;s<12;){const r=n.charCodeAt(t+s++);if(r===125){if(s<5||!j(i))break;return{value:String.fromCodePoint(i),size:s}}if(i=i<<4|V(r),i<0)break}throw I(e.source,t,`Invalid Unicode escape sequence: "${n.slice(t,t+s)}".`)}function Ot(e,t){const n=e.source.body,i=ye(n,t+2);if(j(i))return{value:String.fromCodePoint(i),size:6};if(xe(i)&&n.charCodeAt(t+6)===92&&n.charCodeAt(t+7)===117){const s=ye(n,t+8);if(De(s))return{value:String.fromCodePoint(i,s),size:12}}throw I(e.source,t,`Invalid Unicode escape sequence: "${n.slice(t,t+6)}".`)}function ye(e,t){return V(e.charCodeAt(t))<<12|V(e.charCodeAt(t+1))<<8|V(e.charCodeAt(t+2))<<4|V(e.charCodeAt(t+3))}function V(e){return e>=48&&e<=57?e-48:e>=65&&e<=70?e-55:e>=97&&e<=102?e-87:-1}function bt(e,t){const n=e.source.body;switch(n.charCodeAt(t+1)){case 34:return{value:'"',size:2};case 92:return{value:"\\",size:2};case 47:return{value:"/",size:2};case 98:return{value:"\b",size:2};case 102:return{value:"\f",size:2};case 110:return{value:`
`,size:2};case 114:return{value:"\r",size:2};case 116:return{value:"	",size:2}}throw I(e.source,t,`Invalid character escape sequence: "${n.slice(t,t+2)}".`)}function wt(e,t){const n=e.source.body,i=n.length;let s=e.lineStart,r=t+3,p=r,f="";const y=[];for(;r<i;){const O=n.charCodeAt(r);if(O===34&&n.charCodeAt(r+1)===34&&n.charCodeAt(r+2)===34){f+=n.slice(p,r),y.push(f);const M=E(e,a.BLOCK_STRING,t,r+3,et(y).join(`
`));return e.line+=y.length-1,e.lineStart=s,M}if(O===92&&n.charCodeAt(r+1)===34&&n.charCodeAt(r+2)===34&&n.charCodeAt(r+3)===34){f+=n.slice(p,r),p=r+1,r+=4;continue}if(O===10||O===13){f+=n.slice(p,r),y.push(f),O===13&&n.charCodeAt(r+1)===10?r+=2:++r,f="",p=r,s=r;continue}if(j(O))++r;else if(Z(n,r))r+=2;else throw I(e.source,r,`Invalid character within String: ${S(e,r)}.`)}throw I(e.source,r,"Unterminated string.")}function Lt(e,t){const n=e.source.body,i=n.length;let s=t+1;for(;s<i;){const r=n.charCodeAt(s);if(tt(r))++s;else break}return E(e,a.NAME,t,s,n.slice(t,s))}class Re{constructor(t,n="GraphQL request",i={line:1,column:1}){typeof t=="string"||w(!1,`Body must be a string. Received: ${h(t)}.`),this.body=t,this.name=n,this.locationOffset=i,this.locationOffset.line>0||w(!1,"line in locationOffset is 1-indexed and must be positive."),this.locationOffset.column>0||w(!1,"column in locationOffset is 1-indexed and must be positive.")}get[Symbol.toStringTag](){return"Source"}}function xt(e){return Ae(e,Re)}function Dt(e,t){const n=new Rt(e,t);n.expectToken(a.SOF);const i=n.parseValueLiteral(!1);return n.expectToken(a.EOF),i}class Rt{constructor(t,n={}){const i=xt(t)?t:new Re(t);this._lexer=new Et(i),this._options=n,this._tokenCounter=0}parseName(){const t=this.expectToken(a.NAME);return this.node(t,{kind:c.NAME,value:t.value})}parseDocument(){return this.node(this._lexer.token,{kind:c.DOCUMENT,definitions:this.many(a.SOF,this.parseDefinition,a.EOF)})}parseDefinition(){if(this.peek(a.BRACE_L))return this.parseOperationDefinition();const t=this.peekDescription(),n=t?this._lexer.lookahead():this._lexer.token;if(n.kind===a.NAME){switch(n.value){case"schema":return this.parseSchemaDefinition();case"scalar":return this.parseScalarTypeDefinition();case"type":return this.parseObjectTypeDefinition();case"interface":return this.parseInterfaceTypeDefinition();case"union":return this.parseUnionTypeDefinition();case"enum":return this.parseEnumTypeDefinition();case"input":return this.parseInputObjectTypeDefinition();case"directive":return this.parseDirectiveDefinition()}if(t)throw I(this._lexer.source,this._lexer.token.start,"Unexpected description, descriptions are supported only on type definitions.");switch(n.value){case"query":case"mutation":case"subscription":return this.parseOperationDefinition();case"fragment":return this.parseFragmentDefinition();case"extend":return this.parseTypeSystemExtension()}}throw this.unexpected(n)}parseOperationDefinition(){const t=this._lexer.token;if(this.peek(a.BRACE_L))return this.node(t,{kind:c.OPERATION_DEFINITION,operation:x.QUERY,name:void 0,variableDefinitions:[],directives:[],selectionSet:this.parseSelectionSet()});const n=this.parseOperationType();let i;return this.peek(a.NAME)&&(i=this.parseName()),this.node(t,{kind:c.OPERATION_DEFINITION,operation:n,name:i,variableDefinitions:this.parseVariableDefinitions(),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseOperationType(){const t=this.expectToken(a.NAME);switch(t.value){case"query":return x.QUERY;case"mutation":return x.MUTATION;case"subscription":return x.SUBSCRIPTION}throw this.unexpected(t)}parseVariableDefinitions(){return this.optionalMany(a.PAREN_L,this.parseVariableDefinition,a.PAREN_R)}parseVariableDefinition(){return this.node(this._lexer.token,{kind:c.VARIABLE_DEFINITION,variable:this.parseVariable(),type:(this.expectToken(a.COLON),this.parseTypeReference()),defaultValue:this.expectOptionalToken(a.EQUALS)?this.parseConstValueLiteral():void 0,directives:this.parseConstDirectives()})}parseVariable(){const t=this._lexer.token;return this.expectToken(a.DOLLAR),this.node(t,{kind:c.VARIABLE,name:this.parseName()})}parseSelectionSet(){return this.node(this._lexer.token,{kind:c.SELECTION_SET,selections:this.many(a.BRACE_L,this.parseSelection,a.BRACE_R)})}parseSelection(){return this.peek(a.SPREAD)?this.parseFragment():this.parseField()}parseField(){const t=this._lexer.token,n=this.parseName();let i,s;return this.expectOptionalToken(a.COLON)?(i=n,s=this.parseName()):s=n,this.node(t,{kind:c.FIELD,alias:i,name:s,arguments:this.parseArguments(!1),directives:this.parseDirectives(!1),selectionSet:this.peek(a.BRACE_L)?this.parseSelectionSet():void 0})}parseArguments(t){const n=t?this.parseConstArgument:this.parseArgument;return this.optionalMany(a.PAREN_L,n,a.PAREN_R)}parseArgument(t=!1){const n=this._lexer.token,i=this.parseName();return this.expectToken(a.COLON),this.node(n,{kind:c.ARGUMENT,name:i,value:this.parseValueLiteral(t)})}parseConstArgument(){return this.parseArgument(!0)}parseFragment(){const t=this._lexer.token;this.expectToken(a.SPREAD);const n=this.expectOptionalKeyword("on");return!n&&this.peek(a.NAME)?this.node(t,{kind:c.FRAGMENT_SPREAD,name:this.parseFragmentName(),directives:this.parseDirectives(!1)}):this.node(t,{kind:c.INLINE_FRAGMENT,typeCondition:n?this.parseNamedType():void 0,directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseFragmentDefinition(){const t=this._lexer.token;return this.expectKeyword("fragment"),this._options.allowLegacyFragmentVariables===!0?this.node(t,{kind:c.FRAGMENT_DEFINITION,name:this.parseFragmentName(),variableDefinitions:this.parseVariableDefinitions(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()}):this.node(t,{kind:c.FRAGMENT_DEFINITION,name:this.parseFragmentName(),typeCondition:(this.expectKeyword("on"),this.parseNamedType()),directives:this.parseDirectives(!1),selectionSet:this.parseSelectionSet()})}parseFragmentName(){if(this._lexer.token.value==="on")throw this.unexpected();return this.parseName()}parseValueLiteral(t){const n=this._lexer.token;switch(n.kind){case a.BRACKET_L:return this.parseList(t);case a.BRACE_L:return this.parseObject(t);case a.INT:return this.advanceLexer(),this.node(n,{kind:c.INT,value:n.value});case a.FLOAT:return this.advanceLexer(),this.node(n,{kind:c.FLOAT,value:n.value});case a.STRING:case a.BLOCK_STRING:return this.parseStringLiteral();case a.NAME:switch(this.advanceLexer(),n.value){case"true":return this.node(n,{kind:c.BOOLEAN,value:!0});case"false":return this.node(n,{kind:c.BOOLEAN,value:!1});case"null":return this.node(n,{kind:c.NULL});default:return this.node(n,{kind:c.ENUM,value:n.value})}case a.DOLLAR:if(t)if(this.expectToken(a.DOLLAR),this._lexer.token.kind===a.NAME){const i=this._lexer.token.value;throw I(this._lexer.source,n.start,`Unexpected variable "$${i}" in constant value.`)}else throw this.unexpected(n);return this.parseVariable();default:throw this.unexpected()}}parseConstValueLiteral(){return this.parseValueLiteral(!0)}parseStringLiteral(){const t=this._lexer.token;return this.advanceLexer(),this.node(t,{kind:c.STRING,value:t.value,block:t.kind===a.BLOCK_STRING})}parseList(t){const n=()=>this.parseValueLiteral(t);return this.node(this._lexer.token,{kind:c.LIST,values:this.any(a.BRACKET_L,n,a.BRACKET_R)})}parseObject(t){const n=()=>this.parseObjectField(t);return this.node(this._lexer.token,{kind:c.OBJECT,fields:this.any(a.BRACE_L,n,a.BRACE_R)})}parseObjectField(t){const n=this._lexer.token,i=this.parseName();return this.expectToken(a.COLON),this.node(n,{kind:c.OBJECT_FIELD,name:i,value:this.parseValueLiteral(t)})}parseDirectives(t){const n=[];for(;this.peek(a.AT);)n.push(this.parseDirective(t));return n}parseConstDirectives(){return this.parseDirectives(!0)}parseDirective(t){const n=this._lexer.token;return this.expectToken(a.AT),this.node(n,{kind:c.DIRECTIVE,name:this.parseName(),arguments:this.parseArguments(t)})}parseTypeReference(){const t=this._lexer.token;let n;if(this.expectOptionalToken(a.BRACKET_L)){const i=this.parseTypeReference();this.expectToken(a.BRACKET_R),n=this.node(t,{kind:c.LIST_TYPE,type:i})}else n=this.parseNamedType();return this.expectOptionalToken(a.BANG)?this.node(t,{kind:c.NON_NULL_TYPE,type:n}):n}parseNamedType(){return this.node(this._lexer.token,{kind:c.NAMED_TYPE,name:this.parseName()})}peekDescription(){return this.peek(a.STRING)||this.peek(a.BLOCK_STRING)}parseDescription(){if(this.peekDescription())return this.parseStringLiteral()}parseSchemaDefinition(){const t=this._lexer.token,n=this.parseDescription();this.expectKeyword("schema");const i=this.parseConstDirectives(),s=this.many(a.BRACE_L,this.parseOperationTypeDefinition,a.BRACE_R);return this.node(t,{kind:c.SCHEMA_DEFINITION,description:n,directives:i,operationTypes:s})}parseOperationTypeDefinition(){const t=this._lexer.token,n=this.parseOperationType();this.expectToken(a.COLON);const i=this.parseNamedType();return this.node(t,{kind:c.OPERATION_TYPE_DEFINITION,operation:n,type:i})}parseScalarTypeDefinition(){const t=this._lexer.token,n=this.parseDescription();this.expectKeyword("scalar");const i=this.parseName(),s=this.parseConstDirectives();return this.node(t,{kind:c.SCALAR_TYPE_DEFINITION,description:n,name:i,directives:s})}parseObjectTypeDefinition(){const t=this._lexer.token,n=this.parseDescription();this.expectKeyword("type");const i=this.parseName(),s=this.parseImplementsInterfaces(),r=this.parseConstDirectives(),p=this.parseFieldsDefinition();return this.node(t,{kind:c.OBJECT_TYPE_DEFINITION,description:n,name:i,interfaces:s,directives:r,fields:p})}parseImplementsInterfaces(){return this.expectOptionalKeyword("implements")?this.delimitedMany(a.AMP,this.parseNamedType):[]}parseFieldsDefinition(){return this.optionalMany(a.BRACE_L,this.parseFieldDefinition,a.BRACE_R)}parseFieldDefinition(){const t=this._lexer.token,n=this.parseDescription(),i=this.parseName(),s=this.parseArgumentDefs();this.expectToken(a.COLON);const r=this.parseTypeReference(),p=this.parseConstDirectives();return this.node(t,{kind:c.FIELD_DEFINITION,description:n,name:i,arguments:s,type:r,directives:p})}parseArgumentDefs(){return this.optionalMany(a.PAREN_L,this.parseInputValueDef,a.PAREN_R)}parseInputValueDef(){const t=this._lexer.token,n=this.parseDescription(),i=this.parseName();this.expectToken(a.COLON);const s=this.parseTypeReference();let r;this.expectOptionalToken(a.EQUALS)&&(r=this.parseConstValueLiteral());const p=this.parseConstDirectives();return this.node(t,{kind:c.INPUT_VALUE_DEFINITION,description:n,name:i,type:s,defaultValue:r,directives:p})}parseInterfaceTypeDefinition(){const t=this._lexer.token,n=this.parseDescription();this.expectKeyword("interface");const i=this.parseName(),s=this.parseImplementsInterfaces(),r=this.parseConstDirectives(),p=this.parseFieldsDefinition();return this.node(t,{kind:c.INTERFACE_TYPE_DEFINITION,description:n,name:i,interfaces:s,directives:r,fields:p})}parseUnionTypeDefinition(){const t=this._lexer.token,n=this.parseDescription();this.expectKeyword("union");const i=this.parseName(),s=this.parseConstDirectives(),r=this.parseUnionMemberTypes();return this.node(t,{kind:c.UNION_TYPE_DEFINITION,description:n,name:i,directives:s,types:r})}parseUnionMemberTypes(){return this.expectOptionalToken(a.EQUALS)?this.delimitedMany(a.PIPE,this.parseNamedType):[]}parseEnumTypeDefinition(){const t=this._lexer.token,n=this.parseDescription();this.expectKeyword("enum");const i=this.parseName(),s=this.parseConstDirectives(),r=this.parseEnumValuesDefinition();return this.node(t,{kind:c.ENUM_TYPE_DEFINITION,description:n,name:i,directives:s,values:r})}parseEnumValuesDefinition(){return this.optionalMany(a.BRACE_L,this.parseEnumValueDefinition,a.BRACE_R)}parseEnumValueDefinition(){const t=this._lexer.token,n=this.parseDescription(),i=this.parseEnumValueName(),s=this.parseConstDirectives();return this.node(t,{kind:c.ENUM_VALUE_DEFINITION,description:n,name:i,directives:s})}parseEnumValueName(){if(this._lexer.token.value==="true"||this._lexer.token.value==="false"||this._lexer.token.value==="null")throw I(this._lexer.source,this._lexer.token.start,`${H(this._lexer.token)} is reserved and cannot be used for an enum value.`);return this.parseName()}parseInputObjectTypeDefinition(){const t=this._lexer.token,n=this.parseDescription();this.expectKeyword("input");const i=this.parseName(),s=this.parseConstDirectives(),r=this.parseInputFieldsDefinition();return this.node(t,{kind:c.INPUT_OBJECT_TYPE_DEFINITION,description:n,name:i,directives:s,fields:r})}parseInputFieldsDefinition(){return this.optionalMany(a.BRACE_L,this.parseInputValueDef,a.BRACE_R)}parseTypeSystemExtension(){const t=this._lexer.lookahead();if(t.kind===a.NAME)switch(t.value){case"schema":return this.parseSchemaExtension();case"scalar":return this.parseScalarTypeExtension();case"type":return this.parseObjectTypeExtension();case"interface":return this.parseInterfaceTypeExtension();case"union":return this.parseUnionTypeExtension();case"enum":return this.parseEnumTypeExtension();case"input":return this.parseInputObjectTypeExtension()}throw this.unexpected(t)}parseSchemaExtension(){const t=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("schema");const n=this.parseConstDirectives(),i=this.optionalMany(a.BRACE_L,this.parseOperationTypeDefinition,a.BRACE_R);if(n.length===0&&i.length===0)throw this.unexpected();return this.node(t,{kind:c.SCHEMA_EXTENSION,directives:n,operationTypes:i})}parseScalarTypeExtension(){const t=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("scalar");const n=this.parseName(),i=this.parseConstDirectives();if(i.length===0)throw this.unexpected();return this.node(t,{kind:c.SCALAR_TYPE_EXTENSION,name:n,directives:i})}parseObjectTypeExtension(){const t=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("type");const n=this.parseName(),i=this.parseImplementsInterfaces(),s=this.parseConstDirectives(),r=this.parseFieldsDefinition();if(i.length===0&&s.length===0&&r.length===0)throw this.unexpected();return this.node(t,{kind:c.OBJECT_TYPE_EXTENSION,name:n,interfaces:i,directives:s,fields:r})}parseInterfaceTypeExtension(){const t=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("interface");const n=this.parseName(),i=this.parseImplementsInterfaces(),s=this.parseConstDirectives(),r=this.parseFieldsDefinition();if(i.length===0&&s.length===0&&r.length===0)throw this.unexpected();return this.node(t,{kind:c.INTERFACE_TYPE_EXTENSION,name:n,interfaces:i,directives:s,fields:r})}parseUnionTypeExtension(){const t=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("union");const n=this.parseName(),i=this.parseConstDirectives(),s=this.parseUnionMemberTypes();if(i.length===0&&s.length===0)throw this.unexpected();return this.node(t,{kind:c.UNION_TYPE_EXTENSION,name:n,directives:i,types:s})}parseEnumTypeExtension(){const t=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("enum");const n=this.parseName(),i=this.parseConstDirectives(),s=this.parseEnumValuesDefinition();if(i.length===0&&s.length===0)throw this.unexpected();return this.node(t,{kind:c.ENUM_TYPE_EXTENSION,name:n,directives:i,values:s})}parseInputObjectTypeExtension(){const t=this._lexer.token;this.expectKeyword("extend"),this.expectKeyword("input");const n=this.parseName(),i=this.parseConstDirectives(),s=this.parseInputFieldsDefinition();if(i.length===0&&s.length===0)throw this.unexpected();return this.node(t,{kind:c.INPUT_OBJECT_TYPE_EXTENSION,name:n,directives:i,fields:s})}parseDirectiveDefinition(){const t=this._lexer.token,n=this.parseDescription();this.expectKeyword("directive"),this.expectToken(a.AT);const i=this.parseName(),s=this.parseArgumentDefs(),r=this.expectOptionalKeyword("repeatable");this.expectKeyword("on");const p=this.parseDirectiveLocations();return this.node(t,{kind:c.DIRECTIVE_DEFINITION,description:n,name:i,arguments:s,repeatable:r,locations:p})}parseDirectiveLocations(){return this.delimitedMany(a.PIPE,this.parseDirectiveLocation)}parseDirectiveLocation(){const t=this._lexer.token,n=this.parseName();if(Object.prototype.hasOwnProperty.call(d,n.value))return n;throw this.unexpected(t)}node(t,n){return this._options.noLocation!==!0&&(n.loc=new nt(t,this._lexer.lastToken,this._lexer.source)),n}peek(t){return this._lexer.token.kind===t}expectToken(t){const n=this._lexer.token;if(n.kind===t)return this.advanceLexer(),n;throw I(this._lexer.source,n.start,`Expected ${ke(t)}, found ${H(n)}.`)}expectOptionalToken(t){return this._lexer.token.kind===t?(this.advanceLexer(),!0):!1}expectKeyword(t){const n=this._lexer.token;if(n.kind===a.NAME&&n.value===t)this.advanceLexer();else throw I(this._lexer.source,n.start,`Expected "${t}", found ${H(n)}.`)}expectOptionalKeyword(t){const n=this._lexer.token;return n.kind===a.NAME&&n.value===t?(this.advanceLexer(),!0):!1}unexpected(t){const n=t!=null?t:this._lexer.token;return I(this._lexer.source,n.start,`Unexpected ${H(n)}.`)}any(t,n,i){this.expectToken(t);const s=[];for(;!this.expectOptionalToken(i);)s.push(n.call(this));return s}optionalMany(t,n,i){if(this.expectOptionalToken(t)){const s=[];do s.push(n.call(this));while(!this.expectOptionalToken(i));return s}return[]}many(t,n,i){this.expectToken(t);const s=[];do s.push(n.call(this));while(!this.expectOptionalToken(i));return s}delimitedMany(t,n){this.expectOptionalToken(t);const i=[];do i.push(n.call(this));while(this.expectOptionalToken(t));return i}advanceLexer(){const{maxTokens:t}=this._options,n=this._lexer.advance();if(t!==void 0&&n.kind!==a.EOF&&(++this._tokenCounter,this._tokenCounter>t))throw I(this._lexer.source,n.start,`Document contains more that ${t} tokens. Parsing aborted.`)}}function H(e){const t=e.value;return ke(e.kind)+(t!=null?` "${t}"`:"")}function ke(e){return Nt(e)?`"${e}"`:e}const ie=2147483647,re=-2147483648,kt=new B({name:"Int",description:"The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.",serialize(e){const t=z(e);if(typeof t=="boolean")return t?1:0;let n=t;if(typeof t=="string"&&t!==""&&(n=Number(t)),typeof n!="number"||!Number.isInteger(n))throw new N(`Int cannot represent non-integer value: ${h(t)}`);if(n>ie||n<re)throw new N("Int cannot represent non 32-bit signed integer value: "+h(t));return n},parseValue(e){if(typeof e!="number"||!Number.isInteger(e))throw new N(`Int cannot represent non-integer value: ${h(e)}`);if(e>ie||e<re)throw new N(`Int cannot represent non 32-bit signed integer value: ${e}`);return e},parseLiteral(e){if(e.kind!==c.INT)throw new N(`Int cannot represent non-integer value: ${P(e)}`,{nodes:e});const t=parseInt(e.value,10);if(t>ie||t<re)throw new N(`Int cannot represent non 32-bit signed integer value: ${e.value}`,{nodes:e});return t}}),Ct=new B({name:"Float",description:"The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).",serialize(e){const t=z(e);if(typeof t=="boolean")return t?1:0;let n=t;if(typeof t=="string"&&t!==""&&(n=Number(t)),typeof n!="number"||!Number.isFinite(n))throw new N(`Float cannot represent non numeric value: ${h(t)}`);return n},parseValue(e){if(typeof e!="number"||!Number.isFinite(e))throw new N(`Float cannot represent non numeric value: ${h(e)}`);return e},parseLiteral(e){if(e.kind!==c.FLOAT&&e.kind!==c.INT)throw new N(`Float cannot represent non numeric value: ${P(e)}`,e);return parseFloat(e.value)}}),T=new B({name:"String",description:"The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.",serialize(e){const t=z(e);if(typeof t=="string")return t;if(typeof t=="boolean")return t?"true":"false";if(typeof t=="number"&&Number.isFinite(t))return t.toString();throw new N(`String cannot represent value: ${h(e)}`)},parseValue(e){if(typeof e!="string")throw new N(`String cannot represent a non string value: ${h(e)}`);return e},parseLiteral(e){if(e.kind!==c.STRING)throw new N(`String cannot represent a non string value: ${P(e)}`,{nodes:e});return e.value}}),_=new B({name:"Boolean",description:"The `Boolean` scalar type represents `true` or `false`.",serialize(e){const t=z(e);if(typeof t=="boolean")return t;if(Number.isFinite(t))return t!==0;throw new N(`Boolean cannot represent a non boolean value: ${h(t)}`)},parseValue(e){if(typeof e!="boolean")throw new N(`Boolean cannot represent a non boolean value: ${h(e)}`);return e},parseLiteral(e){if(e.kind!==c.BOOLEAN)throw new N(`Boolean cannot represent a non boolean value: ${P(e)}`,{nodes:e});return e.value}}),Ce=new B({name:"ID",description:'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.',serialize(e){const t=z(e);if(typeof t=="string")return t;if(Number.isInteger(t))return String(t);throw new N(`ID cannot represent value: ${h(e)}`)},parseValue(e){if(typeof e=="string")return e;if(typeof e=="number"&&Number.isInteger(e))return e.toString();throw new N(`ID cannot represent value: ${h(e)}`)},parseLiteral(e){if(e.kind!==c.STRING&&e.kind!==c.INT)throw new N("ID cannot represent a non-string and non-integer value: "+P(e),{nodes:e});return e.value}}),St=Object.freeze([T,kt,Ct,_,Ce]);function z(e){if(C(e)){if(typeof e.valueOf=="function"){const t=e.valueOf();if(!C(t))return t}if(typeof e.toJSON=="function")return e.toJSON()}return e}function Ft(e){return Ae(e,G)}class G{constructor(t){var n,i;this.name=st(t.name),this.description=t.description,this.locations=t.locations,this.isRepeatable=(n=t.isRepeatable)!==null&&n!==void 0?n:!1,this.extensions=Oe(t.extensions),this.astNode=t.astNode,Array.isArray(t.locations)||w(!1,`@${t.name} locations must be an Array.`);const s=(i=t.args)!==null&&i!==void 0?i:{};C(s)&&!Array.isArray(s)||w(!1,`@${t.name} args must be an object with argument names as keys.`),this.args=it(s)}get[Symbol.toStringTag](){return"GraphQLDirective"}toConfig(){return{name:this.name,description:this.description,locations:this.locations,args:rt(this.args),isRepeatable:this.isRepeatable,extensions:this.extensions,astNode:this.astNode}}toString(){return"@"+this.name}toJSON(){return this.toString()}}const Mt=new G({name:"include",description:"Directs the executor to include this field or fragment only when the `if` argument is true.",locations:[d.FIELD,d.FRAGMENT_SPREAD,d.INLINE_FRAGMENT],args:{if:{type:new l(_),description:"Included when true."}}}),Ut=new G({name:"skip",description:"Directs the executor to skip this field or fragment when the `if` argument is true.",locations:[d.FIELD,d.FRAGMENT_SPREAD,d.INLINE_FRAGMENT],args:{if:{type:new l(_),description:"Skipped when true."}}}),Bt="No longer supported",Pt=new G({name:"deprecated",description:"Marks an element of a GraphQL schema as no longer supported.",locations:[d.FIELD_DEFINITION,d.ARGUMENT_DEFINITION,d.INPUT_FIELD_DEFINITION,d.ENUM_VALUE],args:{reason:{type:T,description:"Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).",defaultValue:Bt}}}),jt=new G({name:"specifiedBy",description:"Exposes a URL that specifies the behavior of this scalar.",locations:[d.SCALAR],args:{url:{type:new l(T),description:"The URL that specifies the behavior of this scalar."}}}),Gt=Object.freeze([Mt,Ut,Pt,jt]);function Vt(e){return typeof e=="object"&&typeof(e==null?void 0:e[Symbol.iterator])=="function"}function $(e,t){if(D(t)){const n=$(e,t.ofType);return(n==null?void 0:n.kind)===c.NULL?null:n}if(e===null)return{kind:c.NULL};if(e===void 0)return null;if(X(t)){const n=t.ofType;if(Vt(e)){const i=[];for(const s of e){const r=$(s,n);r!=null&&i.push(r)}return{kind:c.LIST,values:i}}return $(e,n)}if(q(t)){if(!C(e))return null;const n=[];for(const i of Object.values(t.getFields())){const s=$(e[i.name],i.type);s&&n.push({kind:c.OBJECT_FIELD,name:{kind:c.NAME,value:i.name},value:s})}return{kind:c.OBJECT,fields:n}}if(be(t)){const n=t.serialize(e);if(n==null)return null;if(typeof n=="boolean")return{kind:c.BOOLEAN,value:n};if(typeof n=="number"&&Number.isFinite(n)){const i=String(n);return Te.test(i)?{kind:c.INT,value:i}:{kind:c.FLOAT,value:i}}if(typeof n=="string")return ce(t)?{kind:c.ENUM,value:n}:t===Ce&&Te.test(n)?{kind:c.INT,value:n}:{kind:c.STRING,value:n};throw new TypeError(`Cannot convert value to AST: ${h(n)}.`)}ue(!1,"Unexpected input type: "+h(t))}const Te=/^-?(?:0|[1-9][0-9]*)$/,de=new F({name:"__Schema",description:"A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.",fields:()=>({description:{type:T,resolve:e=>e.description},types:{description:"A list of all types supported by this server.",type:new l(new g(new l(A))),resolve(e){return Object.values(e.getTypeMap())}},queryType:{description:"The type that query operations will be rooted at.",type:new l(A),resolve:e=>e.getQueryType()},mutationType:{description:"If this server supports mutation, the type that mutation operations will be rooted at.",type:A,resolve:e=>e.getMutationType()},subscriptionType:{description:"If this server support subscription, the type that subscription operations will be rooted at.",type:A,resolve:e=>e.getSubscriptionType()},directives:{description:"A list of all directives supported by this server.",type:new l(new g(new l(Se))),resolve:e=>e.getDirectives()}})}),Se=new F({name:"__Directive",description:`A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.

In some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.`,fields:()=>({name:{type:new l(T),resolve:e=>e.name},description:{type:T,resolve:e=>e.description},isRepeatable:{type:new l(_),resolve:e=>e.isRepeatable},locations:{type:new l(new g(new l(Fe))),resolve:e=>e.locations},args:{type:new l(new g(new l(ee))),args:{includeDeprecated:{type:_,defaultValue:!1}},resolve(e,{includeDeprecated:t}){return t?e.args:e.args.filter(n=>n.deprecationReason==null)}}})}),Fe=new le({name:"__DirectiveLocation",description:"A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.",values:{QUERY:{value:d.QUERY,description:"Location adjacent to a query operation."},MUTATION:{value:d.MUTATION,description:"Location adjacent to a mutation operation."},SUBSCRIPTION:{value:d.SUBSCRIPTION,description:"Location adjacent to a subscription operation."},FIELD:{value:d.FIELD,description:"Location adjacent to a field."},FRAGMENT_DEFINITION:{value:d.FRAGMENT_DEFINITION,description:"Location adjacent to a fragment definition."},FRAGMENT_SPREAD:{value:d.FRAGMENT_SPREAD,description:"Location adjacent to a fragment spread."},INLINE_FRAGMENT:{value:d.INLINE_FRAGMENT,description:"Location adjacent to an inline fragment."},VARIABLE_DEFINITION:{value:d.VARIABLE_DEFINITION,description:"Location adjacent to a variable definition."},SCHEMA:{value:d.SCHEMA,description:"Location adjacent to a schema definition."},SCALAR:{value:d.SCALAR,description:"Location adjacent to a scalar definition."},OBJECT:{value:d.OBJECT,description:"Location adjacent to an object type definition."},FIELD_DEFINITION:{value:d.FIELD_DEFINITION,description:"Location adjacent to a field definition."},ARGUMENT_DEFINITION:{value:d.ARGUMENT_DEFINITION,description:"Location adjacent to an argument definition."},INTERFACE:{value:d.INTERFACE,description:"Location adjacent to an interface definition."},UNION:{value:d.UNION,description:"Location adjacent to a union definition."},ENUM:{value:d.ENUM,description:"Location adjacent to an enum definition."},ENUM_VALUE:{value:d.ENUM_VALUE,description:"Location adjacent to an enum value definition."},INPUT_OBJECT:{value:d.INPUT_OBJECT,description:"Location adjacent to an input object type definition."},INPUT_FIELD_DEFINITION:{value:d.INPUT_FIELD_DEFINITION,description:"Location adjacent to an input object field definition."}}}),A=new F({name:"__Type",description:"The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\n\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByURL`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.",fields:()=>({kind:{type:new l(Be),resolve(e){if(at(e))return m.SCALAR;if(R(e))return m.OBJECT;if(k(e))return m.INTERFACE;if(K(e))return m.UNION;if(ce(e))return m.ENUM;if(q(e))return m.INPUT_OBJECT;if(X(e))return m.LIST;if(D(e))return m.NON_NULL;ue(!1,`Unexpected type: "${h(e)}".`)}},name:{type:T,resolve:e=>"name"in e?e.name:void 0},description:{type:T,resolve:e=>"description"in e?e.description:void 0},specifiedByURL:{type:T,resolve:e=>"specifiedByURL"in e?e.specifiedByURL:void 0},fields:{type:new g(new l(Me)),args:{includeDeprecated:{type:_,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if(R(e)||k(e)){const n=Object.values(e.getFields());return t?n:n.filter(i=>i.deprecationReason==null)}}},interfaces:{type:new g(new l(A)),resolve(e){if(R(e)||k(e))return e.getInterfaces()}},possibleTypes:{type:new g(new l(A)),resolve(e,t,n,{schema:i}){if(ot(e))return i.getPossibleTypes(e)}},enumValues:{type:new g(new l(Ue)),args:{includeDeprecated:{type:_,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if(ce(e)){const n=e.getValues();return t?n:n.filter(i=>i.deprecationReason==null)}}},inputFields:{type:new g(new l(ee)),args:{includeDeprecated:{type:_,defaultValue:!1}},resolve(e,{includeDeprecated:t}){if(q(e)){const n=Object.values(e.getFields());return t?n:n.filter(i=>i.deprecationReason==null)}}},ofType:{type:A,resolve:e=>"ofType"in e?e.ofType:void 0}})}),Me=new F({name:"__Field",description:"Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.",fields:()=>({name:{type:new l(T),resolve:e=>e.name},description:{type:T,resolve:e=>e.description},args:{type:new l(new g(new l(ee))),args:{includeDeprecated:{type:_,defaultValue:!1}},resolve(e,{includeDeprecated:t}){return t?e.args:e.args.filter(n=>n.deprecationReason==null)}},type:{type:new l(A),resolve:e=>e.type},isDeprecated:{type:new l(_),resolve:e=>e.deprecationReason!=null},deprecationReason:{type:T,resolve:e=>e.deprecationReason}})}),ee=new F({name:"__InputValue",description:"Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.",fields:()=>({name:{type:new l(T),resolve:e=>e.name},description:{type:T,resolve:e=>e.description},type:{type:new l(A),resolve:e=>e.type},defaultValue:{type:T,description:"A GraphQL-formatted string representing the default value for this input value.",resolve(e){const{type:t,defaultValue:n}=e,i=$(n,t);return i?P(i):null}},isDeprecated:{type:new l(_),resolve:e=>e.deprecationReason!=null},deprecationReason:{type:T,resolve:e=>e.deprecationReason}})}),Ue=new F({name:"__EnumValue",description:"One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.",fields:()=>({name:{type:new l(T),resolve:e=>e.name},description:{type:T,resolve:e=>e.description},isDeprecated:{type:new l(_),resolve:e=>e.deprecationReason!=null},deprecationReason:{type:T,resolve:e=>e.deprecationReason}})});var m;(function(e){e.SCALAR="SCALAR",e.OBJECT="OBJECT",e.INTERFACE="INTERFACE",e.UNION="UNION",e.ENUM="ENUM",e.INPUT_OBJECT="INPUT_OBJECT",e.LIST="LIST",e.NON_NULL="NON_NULL"})(m||(m={}));const Be=new le({name:"__TypeKind",description:"An enum describing what kind of type a given `__Type` is.",values:{SCALAR:{value:m.SCALAR,description:"Indicates this type is a scalar."},OBJECT:{value:m.OBJECT,description:"Indicates this type is an object. `fields` and `interfaces` are valid fields."},INTERFACE:{value:m.INTERFACE,description:"Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields."},UNION:{value:m.UNION,description:"Indicates this type is a union. `possibleTypes` is a valid field."},ENUM:{value:m.ENUM,description:"Indicates this type is an enum. `enumValues` is a valid field."},INPUT_OBJECT:{value:m.INPUT_OBJECT,description:"Indicates this type is an input object. `inputFields` is a valid field."},LIST:{value:m.LIST,description:"Indicates this type is a list. `ofType` is a valid field."},NON_NULL:{value:m.NON_NULL,description:"Indicates this type is a non-null. `ofType` is a valid field."}}});new l(de);new l(T);new l(T);const $t=Object.freeze([de,Se,Fe,A,Me,ee,Ue,Be]);class Qt{constructor(t){var n,i;this.__validationErrors=t.assumeValid===!0?[]:void 0,C(t)||w(!1,"Must provide configuration object."),!t.types||Array.isArray(t.types)||w(!1,`"types" must be Array if provided but got: ${h(t.types)}.`),!t.directives||Array.isArray(t.directives)||w(!1,`"directives" must be Array if provided but got: ${h(t.directives)}.`),this.description=t.description,this.extensions=Oe(t.extensions),this.astNode=t.astNode,this.extensionASTNodes=(n=t.extensionASTNodes)!==null&&n!==void 0?n:[],this._queryType=t.query,this._mutationType=t.mutation,this._subscriptionType=t.subscription,this._directives=(i=t.directives)!==null&&i!==void 0?i:Gt;const s=new Set(t.types);if(t.types!=null)for(const r of t.types)s.delete(r),v(r,s);this._queryType!=null&&v(this._queryType,s),this._mutationType!=null&&v(this._mutationType,s),this._subscriptionType!=null&&v(this._subscriptionType,s);for(const r of this._directives)if(Ft(r))for(const p of r.args)v(p.type,s);v(de,s),this._typeMap=Object.create(null),this._subTypeMap=Object.create(null),this._implementationsMap=Object.create(null);for(const r of s){if(r==null)continue;const p=r.name;if(p||w(!1,"One of the provided types for building the Schema is missing a name."),this._typeMap[p]!==void 0)throw new Error(`Schema must contain uniquely named types but contains multiple types named "${p}".`);if(this._typeMap[p]=r,k(r)){for(const f of r.getInterfaces())if(k(f)){let y=this._implementationsMap[f.name];y===void 0&&(y=this._implementationsMap[f.name]={objects:[],interfaces:[]}),y.interfaces.push(r)}}else if(R(r)){for(const f of r.getInterfaces())if(k(f)){let y=this._implementationsMap[f.name];y===void 0&&(y=this._implementationsMap[f.name]={objects:[],interfaces:[]}),y.objects.push(r)}}}}get[Symbol.toStringTag](){return"GraphQLSchema"}getQueryType(){return this._queryType}getMutationType(){return this._mutationType}getSubscriptionType(){return this._subscriptionType}getRootType(t){switch(t){case x.QUERY:return this.getQueryType();case x.MUTATION:return this.getMutationType();case x.SUBSCRIPTION:return this.getSubscriptionType()}}getTypeMap(){return this._typeMap}getType(t){return this.getTypeMap()[t]}getPossibleTypes(t){return K(t)?t.getTypes():this.getImplementations(t).objects}getImplementations(t){const n=this._implementationsMap[t.name];return n!=null?n:{objects:[],interfaces:[]}}isSubType(t,n){let i=this._subTypeMap[t.name];if(i===void 0){if(i=Object.create(null),K(t))for(const s of t.getTypes())i[s.name]=!0;else{const s=this.getImplementations(t);for(const r of s.objects)i[r.name]=!0;for(const r of s.interfaces)i[r.name]=!0}this._subTypeMap[t.name]=i}return i[n.name]!==void 0}getDirectives(){return this._directives}getDirective(t){return this.getDirectives().find(n=>n.name===t)}toConfig(){return{description:this.description,query:this.getQueryType(),mutation:this.getMutationType(),subscription:this.getSubscriptionType(),types:Object.values(this.getTypeMap()),directives:this.getDirectives(),extensions:this.extensions,astNode:this.astNode,extensionASTNodes:this.extensionASTNodes,assumeValid:this.__validationErrors!==void 0}}}function v(e,t){const n=ct(e);if(!t.has(n)){if(t.add(n),K(n))for(const i of n.getTypes())v(i,t);else if(R(n)||k(n)){for(const i of n.getInterfaces())v(i,t);for(const i of Object.values(n.getFields())){v(i.type,t);for(const s of i.args)v(s.type,t)}}else if(q(n))for(const i of Object.values(n.getFields()))v(i.type,t)}return t}function Q(e,t,n){if(!!e){if(e.kind===c.VARIABLE){const i=e.name.value;if(n==null||n[i]===void 0)return;const s=n[i];return s===null&&D(t)?void 0:s}if(D(t))return e.kind===c.NULL?void 0:Q(e,t.ofType,n);if(e.kind===c.NULL)return null;if(X(t)){const i=t.ofType;if(e.kind===c.LIST){const r=[];for(const p of e.values)if(Ee(p,n)){if(D(i))return;r.push(null)}else{const f=Q(p,i,n);if(f===void 0)return;r.push(f)}return r}const s=Q(e,i,n);return s===void 0?void 0:[s]}if(q(t)){if(e.kind!==c.OBJECT)return;const i=Object.create(null),s=pt(e.fields,r=>r.name.value);for(const r of Object.values(t.getFields())){const p=s[r.name];if(!p||Ee(p.value,n)){if(r.defaultValue!==void 0)i[r.name]=r.defaultValue;else if(D(r.type))return;continue}const f=Q(p.value,r.type,n);if(f===void 0)return;i[r.name]=f}return i}if(be(t)){let i;try{i=t.parseLiteral(e,n)}catch{return}return i===void 0?void 0:i}ue(!1,"Unexpected input type: "+h(t))}}function Ee(e,t){return e.kind===c.VARIABLE&&(t==null||t[e.name.value]===void 0)}function Jt(e,t){C(e)&&C(e.__schema)||w(!1,`Invalid or incomplete introspection result. Ensure that you are passing "data" property of introspection response and no "errors" was returned alongside: ${h(e)}.`);const n=e.__schema,i=Y(n.types,o=>o.name,o=>Ge(o));for(const o of[...St,...$t])i[o.name]&&(i[o.name]=o);const s=n.queryType?M(n.queryType):null,r=n.mutationType?M(n.mutationType):null,p=n.subscriptionType?M(n.subscriptionType):null,f=n.directives?n.directives.map(He):[];return new Qt({description:n.description,query:s,mutation:r,subscription:p,types:Object.values(i),directives:f,assumeValid:t==null?void 0:t.assumeValid});function y(o){if(o.kind===m.LIST){const u=o.ofType;if(!u)throw new Error("Decorated type deeper than introspection query.");return new g(y(u))}if(o.kind===m.NON_NULL){const u=o.ofType;if(!u)throw new Error("Decorated type deeper than introspection query.");const b=y(u);return new l(yt(b))}return O(o)}function O(o){const u=o.name;if(!u)throw new Error(`Unknown type reference: ${h(o)}.`);const b=i[u];if(!b)throw new Error(`Invalid or incomplete schema, unknown type: ${u}. Ensure that a full introspection query is used in order to build a client schema.`);return b}function M(o){return ut(O(o))}function je(o){return Tt(O(o))}function Ge(o){if(o!=null&&o.name!=null&&o.kind!=null)switch(o.kind){case m.SCALAR:return Ve(o);case m.OBJECT:return $e(o);case m.INTERFACE:return Qe(o);case m.UNION:return Je(o);case m.ENUM:return qe(o);case m.INPUT_OBJECT:return Ke(o)}const u=h(o);throw new Error(`Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ${u}.`)}function Ve(o){return new B({name:o.name,description:o.description,specifiedByURL:o.specifiedByURL})}function he(o){if(o.interfaces===null&&o.kind===m.INTERFACE)return[];if(!o.interfaces){const u=h(o);throw new Error(`Introspection result missing interfaces: ${u}.`)}return o.interfaces.map(je)}function $e(o){return new F({name:o.name,description:o.description,interfaces:()=>he(o),fields:()=>fe(o)})}function Qe(o){return new lt({name:o.name,description:o.description,interfaces:()=>he(o),fields:()=>fe(o)})}function Je(o){if(!o.possibleTypes){const u=h(o);throw new Error(`Introspection result missing possibleTypes: ${u}.`)}return new dt({name:o.name,description:o.description,types:()=>o.possibleTypes.map(M)})}function qe(o){if(!o.enumValues){const u=h(o);throw new Error(`Introspection result missing enumValues: ${u}.`)}return new le({name:o.name,description:o.description,values:Y(o.enumValues,u=>u.name,u=>({description:u.description,deprecationReason:u.deprecationReason}))})}function Ke(o){if(!o.inputFields){const u=h(o);throw new Error(`Introspection result missing inputFields: ${u}.`)}return new ht({name:o.name,description:o.description,fields:()=>ne(o.inputFields)})}function fe(o){if(!o.fields)throw new Error(`Introspection result missing fields: ${h(o)}.`);return Y(o.fields,u=>u.name,ze)}function ze(o){const u=y(o.type);if(!ft(u)){const b=h(u);throw new Error(`Introspection must provide output type for fields, but received: ${b}.`)}if(!o.args){const b=h(o);throw new Error(`Introspection result missing field args: ${b}.`)}return{description:o.description,deprecationReason:o.deprecationReason,type:u,args:ne(o.args)}}function ne(o){return Y(o,u=>u.name,Ye)}function Ye(o){const u=y(o.type);if(!mt(u)){const We=h(u);throw new Error(`Introspection must provide input type for arguments, but received: ${We}.`)}const b=o.defaultValue!=null?Q(Dt(o.defaultValue),u):void 0;return{description:o.description,type:u,defaultValue:b,deprecationReason:o.deprecationReason}}function He(o){if(!o.args){const u=h(o);throw new Error(`Introspection result missing directive args: ${u}.`)}if(!o.locations){const u=h(o);throw new Error(`Introspection result missing directive locations: ${u}.`)}return new G({name:o.name,description:o.description,isRepeatable:o.isRepeatable,locations:o.locations.slice(),args:ne(o.args)})}}const qt={types:[]},Kt={__schema:qt};class zt{constructor(t){me(this,"mapping");this.mapping=t}getFor(t){return this.mapping.get(t.name)}}var J;(function(e){e.UNION="union",e.ARGUMENT="argument",e.FIELD="field"})(J||(J={}));function Yt(e){const t=new Map;return Ht(e,n=>{R(n)&&Wt(n,i=>{const s=pe(i.type);ae(t,s).references.push({kind:J.FIELD,parent:n,by:i}),Xt(i,p=>{const f=pe(p.type);ae(t,f).references.push({kind:J.ARGUMENT,field:i,type:n,by:p})})}),K(n)&&n.getTypes().forEach(i=>{ae(t,i).references.push({kind:J.UNION,by:n})})}),new zt(t)}function Ht(e,t){Object.entries(e.getTypeMap()).forEach(([,n])=>{n.name.startsWith("__")||t(n)})}function Wt(e,t){Object.entries(e.getFields()).forEach(([,n])=>{t(n)})}function Xt(e,t){Object.entries(e.args).forEach(([,n])=>{t(n)})}function ae(e,t){let n=e.get(t.name);return n||(n={references:[]},e.set(t.name,n)),n}function pe(e){return D(e)||X(e)?pe(e.ofType):e}const L=Jt(Kt);var Ne;const Zt=te((Ne=L.getQueryType())==null?void 0:Ne.getFields());var Ie;const en=te((Ie=L.getMutationType())==null?void 0:Ie.getFields());var _e;const tn=te((_e=L.getSubscriptionType())==null?void 0:_e.getFields()),nn=te(L.getTypeMap()),sn=Yt(L);function te(e){return U.mapKeys(e||{},(t,n)=>n.toLocaleLowerCase())}function rn(){return U.size(L.getTypeMap())<=10}function hn(){return[oe("Queries",L.getQueryType()),oe("Mutations",L.getMutationType()),oe("Subscriptions",L.getSubscriptionType()),cn()].filter(e=>!!e)}function oe(e,t){return on(e,an(t))}function an(e){return U.sortBy((e==null?void 0:e.getFields())||{},t=>t.name)}function on(e,t){return t.length===0?null:{type:"menu",title:e,children:t.map(n=>({type:"page",title:n.name,section:e,deprecated:!!n.deprecationReason,href:Le.joinUrlPaths(we,e.toLocaleLowerCase(),n.name)}))}}function cn(){if(rn())return null;const e=U.sortBy(U.map(L.getTypeMap()),t=>t.name).filter(t=>!t.name.startsWith("__"));return{type:"menu",title:"Types",children:e.map(t=>({type:"page",title:t.name,section:"Types",href:Le.joinUrlPaths(we,"types",t.name)}))}}function fn(e){return Zt[e.toLocaleLowerCase()]}function mn(e){return en[e.toLocaleLowerCase()]}function yn(e){return tn[e.toLocaleLowerCase()]}function Tn(e){return nn[e.toLocaleLowerCase()]}function En(e){if(!!e)return sn.getFor(e)}function Nn(e){return U.flatMap(e.getFields(),t=>({field:t,possibleDescriptions:Pe(t,e)}))}function Pe(e,t){return e?e.description?[{description:e.description,from:t}]:R(t)?t.getInterfaces().flatMap(n=>Pe(n.getFields()[e.name],n)):[]:[]}export{J as R,fn as a,yn as b,hn as c,Nn as d,Tn as e,En as f,mn as g,rn as i,L as s};
