function i(){return{convert:e=>e==null||e===""?null:String(e),asString:e=>String(e),type:e=>e.string().optional()}}function r(e){return{convert:n=>{if(typeof n=="object")return n;if(typeof n=="string"){const o=JSON.parse(n);return typeof o!="object"?null:o}return null},asString:n=>JSON.stringify(n),type:n=>n.record(e(n).optional()).optional()}}function l(e){return{convert:n=>{if(Array.isArray(n))return n;if(typeof n=="string"){const o=JSON.parse(n);return Array.isArray(o)?o:null}return null},asString:n=>JSON.stringify(n),type:n=>n.array(e(n)).optional()}}function t(e,n){const o=a=>n.convert(a[e]);return{name:u(e),key:e,asEnv:a=>({[e]:n.asString(a)}),zod:{type:n.type},get:o,getOrDefault:(a,p)=>{var s;return(s=o(a))!=null?s:p}}}function u(e){return e.toLowerCase().replace(/([-_][a-z])/gi,n=>n.toUpperCase().replace("-","").replace("_",""))}var w={APP_LOGO:t("APP_LOGO",i()),APP_TITLE:t("APP_TITLE",i()),APP_FAVICON:t("APP_FAVICON",i()),SITE_ROOT:t("SITE_ROOT",i()),SITE_META:t("SITE_META",r(e=>e.string())),QUERY_GENERATION_FACTORIES:t("QUERY_GENERATION_FACTORIES",r(e=>e.union([e.string(),e.boolean(),e.number(),e.null(),e.record(e.unknown())]))),PAGES:t("PAGES",l(e=>{const n=e.lazy(()=>e.object({title:e.string().min(1),content:e.union([e.array(n),e.string().min(1)])}));return n})),EXTERNAL_LINKS:t("EXTERNAL_LINKS",l(e=>e.object({label:e.string().min(1),href:e.string().min(1),kind:e.string().min(1).optional(),group:e.string().min(1).optional()})))};function h(){return{convert:e=>{if(e===null||e===void 0)return null;switch(typeof e){case"boolean":return e;case"string":const n=e.toLowerCase().trim();return n==="true"||n==="t"||n==="1";case"number":return e!==0;default:return null}},asString:e=>String(e),type:e=>e.boolean().optional()}}t("MAGIDOC_GENERATE",h());const d="Magidoc",m="https://raw.githubusercontent.com/magidoc-org/magidoc/main/logo/logo_full.png",g='[{"title":"Introduction","content":[{"title":"Welcome","content":"# Welcome\\n\\nWelcome to **Magidoc**! Magidoc a is a free open source static documentation website generator for GraphQL. It aims to provide a vast variety of templates and plugins, giving you access to a large range of customization options to fit your needs.\\n\\n## Why Magidoc?\\n\\nIn the GraphQL world, there are online web IDEs to play with GraphQL schemas. Namely, tools like [GraphiQL](https://github.com/graphql/graphiql) are great for developers to play with your API. However, even though some documentation is available in these tools, it is not easily searchable, discoverability is difficult, and most of all, it lacks of a way to present concepts, workflows, authentication mechanisms and examples.\\n\\nMagidoc helps you achieve this with minimal effort. Either choose between one of the [provided base templates](/templates/introduction) with limited customization options, or generate a [starter project](/cli/command-eject) and customize it however you want.\\n"},{"title":"Quickstart","content":"# Quickstart\\n\\n> Before you begin, make sure that you have **Node 16+** installed. Lower versions are not supported.\\n\\n## 1. Configuration file\\n\\nThe first thing to do is to create a Magidoc configuration file. Here is a minimal `magidoc.mjs` example.\\n\\n```javascript\\n// magidoc.mjs\\n\\nexport default {\\n  introspection: {\\n    type: \'url\',\\n    url: \'https://graphiql-test.netlify.app/.netlify/functions/schema-demo\',\\n  },\\n  website: {\\n    template: \'carbon-multi-page\',\\n  },\\n}\\n```\\n\\nFor the full reference, see the dedicated [Magidoc Configuration](/cli/magidoc-configuration) page.\\n\\n## 2. Generate\\n```shell-session\\n$ pnpm add --global @magidoc/cli@latest && magidoc generate\\n```\\n\\nFor more details on how to use the `generate` command, see the [related documentation](/cli/command-generate).\\n\\n## 3. That\'s it!\\n\\nThe built static website outputs in the `./docs` folder by default. To preview the website locally, run the following command.\\n\\n```shell-session\\n$ magidoc preview\\n```\\n"}]},{"title":"Cli","content":[{"title":"Magidoc Configuration","content":"# Magidoc configuration\\n\\nThe website is customizable through different options defined in a `magidoc.mjs`. The `mjs` extension tells Node to load the javascript file as an [ES Module](https://nodejs.org/api/esm.html), allowing you to use the `import/export` syntax and top-level `async/await`.\\n\\n## Introspection\\n\\nThe introspection configuration object determines how Magidoc fetches the [introspection schema](https://graphql.org/learn/introspection/) for your API. This can be accomplished either using a live endpoint or SDL files.\\n\\n:::tabs\\n---URL\\nFetches the introspection schema from a live API endpoint using the introspection query.\\n\\n```javascript\\nexport default {\\n  introspection: {\\n    /**\\n     * The url type.\\n     */\\n    type: \'url\',\\n\\n    /**\\n     * Your API URL.\\n     */\\n    url: \'https://your-graphql-api-url.com/graphql\',\\n\\n    /**\\n     * The HTTP Method to use.\\n     *\\n     * @default \'POST\'\\n     */\\n    method: \'POST\',\\n\\n    /**\\n     * Some APIs do not follow the GraphQL.js standard, so the introspection may be invalid for your API.\\n     * If this happens, you can specify a different introspection query to use.\\n     */\\n    query: \'<introspection-query>\',\\n\\n    /**\\n     * Optional headers to provide in the request.\\n     */\\n    headers: {\\n      /**\\n       * Since Magidoc uses configuration as code, you can perform\\n       * authentication in this file or use environment variables.\\n       */\\n      Authorization: \'Bearer xxx\',\\n    },\\n  },\\n}\\n```\\n\\n---SDL\\nParses GraphQL [SDL](https://www.apollographql.com/docs/apollo-server/schema/schema/#the-schema-definition-language) files into the introspection schema. SDL files usually use the extension `.graphqls` or `.graphql`.\\n\\n```javascript\\nexport default {\\n  introspection: {\\n    /**\\n     * The SDL introspection type.\\n     */\\n    type: \'sdl\',\\n\\n    /**\\n     * A mandatory paths array where the schema files can be found.\\n     * Glob syntax is supported in case your schema is split into multiple files.\\n     */\\n    paths: [\'schemas/**/*.graphqls\'],\\n  },\\n}\\n```\\n\\n---File\\nUses the introspection schema from a local JSON file.\\n\\n```javascript\\nexport default {\\n  introspection: {\\n    /**\\n     * The file type.\\n     */\\n    type: \'file\',\\n\\n    /**\\n     * The location of the file. If you use a relative path here,\\n     * it will be relative to where the Magidoc CLI is launched.\\n     */\\n    location: \'/a/path/to/schema.json\',\\n  },\\n}\\n```\\n\\n---Raw\\nProvides the JSON schema in a raw string.\\n\\n```javascript\\nexport default {\\n  introspection: {\\n    /**\\n     * The raw type.\\n     */\\n    type: \'raw\',\\n\\n    /**\\n     * The raw content of the introspection result.\\n     * The schema presented bellow is the minimal schema accepted.\\n     */\\n    content: \'{\\"__schema\\": { \\"types\\": [] }}\',\\n  },\\n}\\n```\\n:::\\n\\n## Website\\n\\nThe website object specifies different options for building the documentation website.\\n\\n```javascript\\n// magidoc.mjs\\n\\nexport default {\\n  introspection: {\\n    // ...\\n  },\\n  website: {\\n    /**\\n     * Either the name of the template to use for the website or,\\n     * if you used `magidoc eject` to create a starter, the path to your starter\'s directory.\\n     */\\n    template: \'carbon-multi-page\',\\n\\n    /**\\n     * Optional template version to use.\\n     * Changing this may cause the build to fail depending on the\\n     * changes between the version of the cli and the template.\\n     * It is not recommended to use this property.\\n     * If you wish to use a specific version of the starter, use a specific version of Magidoc instead.\\n     *\\n     * @default current CLI version\\n     */\\n    templateVersion: \'<magidoc-version>\',\\n\\n    /**\\n     * The optional output location for the built website.\\n     *\\n     * @default \'./docs\'\\n     */\\n    output: \'./docs\',\\n\\n    /**\\n     * A directory path, where the directory contains additional static assets for the website.\\n     * This can include images, videos, etc,\\n     *\\n     * These assets will then be available at the root URL of your website,\\n     * conserving the directory structure you put inside this directory.\\n     *\\n     * For instance, this can be used to customize the application icon.\\n     * Inside your directory, put a file named `logo.png`, and as the `appLogo` website setting, use \\"/logo.png\\" as the URL for the image.\\n     *\\n     * @see https://github.com/magidoc-org/magidoc/blob/main/packages/examples/fauna/magidoc.mjs for an example.\\n     * @default undefined\\n     */\\n    staticAssets: \'path/to/a/directory\',\\n\\n    /**\\n     * Options to use for the website.\\n     * Some templates may not support all options.\\n     * Make sure you check the documentation of the chosen template.\\n     */\\n    options: {\\n      /**\\n       * Your application title.\\n       *\\n       * @default \'Magidoc\'\\n       */\\n      appTitle: \'Magidoc\',\\n\\n      /**\\n       * Your application logo, which can either be\\n       * an absolute URL or a relative URL pointing to a static asset.\\n       *\\n       * @default (magidoc logo)\\n       */\\n      appLogo: \'https://website.com/logo.png\',\\n\\n      /**\\n       * Your application\'s favicon, which can either be\\n       * an absolute URL or a relative URL pointing to a static asset.\\n       *\\n       * @default (magidoc logo)\\n       */\\n      appFavicon: \'https://website.com/favicon.ico\',\\n\\n      /**\\n       * The a root path where your website will be served from.\\n       * It is common to see docs websites hosted on a /docs path.\\n       * Example: https://your-website.com/docs\\n       *\\n       * If your website is served from the root path, leave this undefined.\\n       *\\n       * @default undefined\\n       */\\n      siteRoot: \'/docs\',\\n\\n      /**\\n       * Customizes the website meta tags in the header of the HTML pages.\\n       * Any meta tags with the following format are supported:\\n       *\\n       * <meta name={key} content={value} />\\n       *\\n       * A list of common tags can be found here: https://gist.github.com/whitingx/3840905\\n       *\\n       * @default (arbitrary title, description and image are generated from `appTitle` and `appLogo`)\\n       */\\n      siteMeta: {\\n        description: \'This is your website description\',\\n        keywords: \'svelte,docs,magidoc,cool\',\\n      },\\n\\n      /**\\n       * Customize pages and their content. Each of these pages will be presented before the graphQL documentation.\\n       * Use this to present your API urls, authentication flows, designs, concepts, or whatever you want.\\n       *\\n       * @default (A default Magidoc page)\\n       */\\n      pages: [\\n        {\\n          /**\\n           * Each page must have a title for the navbar.\\n           */\\n          title: \'First item\',\\n\\n          /**\\n           * The content. Markdown is supported, but be careful with the indentation.\\n           * Javascript multi-line templates conserve the indentation you have in your strings, which will not output properly.\\n           * It is recommended to either get your markdown from files or use a library to un-indent your strings.\\n           *\\n           * @see: https://www.npmjs.com/package/dedent\\n           */\\n          content: `\\n            # Title\\n\\n            Your markdown here\\n          `,\\n        },\\n        {\\n          title: \'Second Item\',\\n          /**\\n           * Content can also be an array of sub-pages.\\n           * Some templates may not support multi-level nesting.\\n           * Make sure to check out the documentation of your template.\\n           */\\n          content: [\\n            {\\n              title: \'Nested Item\',\\n              content: `Same as before`,\\n            },\\n          ],\\n        },\\n      ],\\n\\n      /**\\n       * A list of external links to render inside the template that could point to other external resources.\\n       *\\n       * Use this for social links (youtube, linkedin, slack, discord, etc),\\n       * external repositories, articles, other documentation, etc.\\n       *\\n       * @see https://github.com/magidoc-org/magidoc/blob/main/docs/magidoc.mjs for an example.\\n       *\\n       */\\n      externalLinks: [\\n        {\\n          /**\\n           * A mandatory href.\\n           */\\n          href: \'https://github.com\',\\n\\n          /**\\n           * A mandatory display name.\\n           */\\n          label: \'Main repository\',\\n\\n          /**\\n           * An optional group for the link, so that links with the same groups are put in the same section.\\n           */\\n          group: \'Repositories\',\\n\\n          /**\\n           * An optional link kind. (i.e github, linkedin, slack, discord, youtube, etc.)\\n           */\\n          kind: \'Github\',\\n        },\\n      ],\\n\\n      /**\\n       * Optional query generation factory. See more details below\\n       *\\n       * @default {}\\n       */\\n      queryGenerationFactories: {\\n        \'Int!\': 420,\\n        String: \'abc\',\\n      },\\n    },\\n  },\\n}\\n```\\n\\nThe list of available templates can be found on the [templates page](/templates/introduction).\\n\\n### queryGenerationFactories\\n\\nThe query generation factories are used to customize query parameters in the generated queries. This is useful in the event that your API contains custom scalars, or that you want to return custom values for a type.\\n\\nTo know more about the extent of what is possible with `queryGenerationFactories`, read the [query generator](/plugins/graphql-query-generator) documentation.\\n\\n:::notification type=\\"warning\\"\\nMagidoc CLI uses environment variables to pass options to the templates, which means that functions are not supported here, unlike when using the `graphql-query-generator` directly. If you wish to have more customization options of the output variables, you will need to use the [eject command](/cli/command-eject) and customize the template directly.\\n:::\\n\\n## Dev\\n\\nThe extra-configuration used when running the [dev command](/cli/command-dev), allowing for live hot-reload of the preview website.\\n\\n```javascript\\nexport default {\\n  introspection: {\\n    // ...\\n  },\\n  website: {\\n    // ...\\n  },\\n  dev: {\\n    /**\\n     * Globs, file paths or directories to watch for and hot-reload on change.\\n     * By default, Magidoc will reload the website on change of any static assets or the magidoc.mjs file.\\n     *\\n     * @see https://github.com/magidoc-org/magidoc/blob/main/docs/magidoc.mjs for an example.\\n     */\\n    watch: [\'./pages/**/*\', \'./directory\', \'./some-other-file.js\'],\\n  },\\n}\\n```\\n"},{"title":"Command - Generate","content":"# Command - Generate\\n\\nThe `generate` command builds a static website using the `magidoc.mjs` configuration file as input. Use the `--help` option to discover more about the optional parameters you can use.\\n\\n```shell-session\\n$ magidoc generate --help\\n```\\n\\nOnce your website is built successfully, the output can be previewed locally using the `preview` command. This command also uses the `magidoc.mjs` file.\\n\\n```shell-session\\n$ magidoc preview --help\\n```\\n"},{"title":"Command - Dev","content":"# Command - Dev\\n\\nThe `dev` starts a development server which handles live hot-reload on change of any asset or configuration of your website. To start the dev-server, simply execute the following command. You can get more details about the other options using the `--help` argument.\\n\\n```shell-session\\n$ magidoc dev\\n```\\n\\nMake sure to check out the [configuration](/cli/magidoc-configuration#dev) related to the development server as well."},{"title":"Command - Eject","content":"# Command - Eject\\n\\nIn case the available customizations are not sufficient for your needs, it is possible to initialize a starter project using any of the [available templates](/templates/introduction) and customize it however you want.\\n\\n:::notification type=\\"info\\"\\nIf your customization needs are small and could be useful to other users, you are welcome to open an issue or contribute to add the customization to the template instead.\\n:::\\n\\n:::notification type=\\"warning\\"\\nIf you eject, you will no longer benefit from the template updates of Magidoc. You will need to update the libraries yourself and will not benefit easily of the new documentation features.\\n:::\\n\\nTo see all the available options for the `eject` command, run the following.\\n\\n```shell-session\\n$ magidoc eject --help\\n```\\n\\nWhen initializing a template, you may choose one of the [Magidoc templates](/templates/introduction). You also have the option to choose a package manager. The recommended default package manager is [Pnpm](https://pnpm.io/workspaces).\\n\\n## Magidoc configuration\\n\\nWhen using the eject command, you can decide to either drop completely Magidoc and use the template by itself, but Magidoc can also work with your template directory. Simply change the `website.template` property to the directory path of your template project.\\n\\n```javascript\\n// magidoc.mjs\\n\\nexport default {\\n  website: {\\n    template: \'./template\',\\n  },\\n}\\n```\\n"}]},{"title":"Templates","content":[{"title":"Introduction","content":"# Introduction\\n\\nThis section contains a list of all the available templates to be used either with the [generate](/cli/command-generate) or [eject](/cli/command-eject) commands.\\n\\n- [carbon-multi-page](/templates/carbon-multi-page)\\n"},{"title":"Carbon-multi-page","content":"# Template - Carbon Multi-Page\\n\\n:::tags\\nsvelte,svelte-kit\\n:::\\n\\nThis starter uses IBM\'s [Carbon Design](https://carbondesignsystem.com/) in a multi-page documentation, meaning that each type, query and mutation gets its own dedicated page.\\n\\nSee the template\'s [readme](https://github.com/magidoc-org/magidoc/blob/main/packages/starters/carbon-multi-page/README.md) if you use the [eject](/cli/command-eject) command.\\n\\n## Demo\\n\\nSee the latest example of this template on [Netlify](https://magidoc-carbon-multi-page.netlify.app), along with its [configuration file](https://github.com/magidoc-org/magidoc/blob/main/packages/examples/fauna/magidoc.mjs).\\n\\n## Supported options\\n\\nThe following options are supported and can be provided via the [magidoc.mjs](/cli/magidoc-configuration) config file.\\n\\n```javascript\\n// magidoc.mjs\\n\\nexport default {\\n  website: {\\n    template: \'carbon-multi-page\',\\n    staticAssets: \'./assets\',\\n    options: {\\n      appTitle: \'Magidoc\',\\n      appLogo: \'https://some-website/my-image.png\',\\n      appFavicon: \'https://website.com/favicon.ico\',\\n      siteRoot: \'/docs\',\\n      siteMeta: {\\n        description: \'My carbon template\',\\n      },\\n      pages: [\\n        {\\n          title: \'Content\',\\n          // This template supports only a single level of nesting.\\n          // All sub-levels will be discarded.\\n          content: [\\n            {\\n              title: \'SubContent\',\\n              content: \'Your markdown here.\',\\n            },\\n          ],\\n        },\\n      ],\\n      queryGenerationFactories: {},\\n    },\\n  },\\n}\\n```\\n\\n## Markdown support\\n\\nThe `carbon-multi-page` template implements an enhanced markdown syntax, in addition to supporting all the syntax of the [Git flavored markdown](https://github.github.com/gfm/) when using custom pages (see `website.options.page` in the configuration above).\\n\\nIn brief, the template offers support for tables, code blocks with syntax highlighting for most popular languages, ordered or unordered lists, emojis, etc.\\n\\n\\n### Enhanced Markdown Syntax\\n\\nThe template also offers custom components through a special syntax.\\n\\n#### Notification\\n\\nA notification is simply a box that will most often contain warnings or information.\\n\\n**Example**\\n\\n```markdown\\n:::notification type=\\"warning\\"\\nThis is a **warning**\\n:::\\n```\\n\\n**Result**\\n\\n:::notification type=\\"warning\\"\\nThis is a **warning**\\n:::\\n\\n**Parameters**\\n\\n| Name | Description | Default |\\n|---|---|---|\\n| type | The type of notification. Supported values are `info`, `success`, `warning` and `error`. | `info` |\\n\\n#### Tabs \\nTabs allow to separate different content into distinct tabs, where only one of the tab is displayed at the time.\\n\\n**Example**\\n\\n```markdown\\n:::tabs\\n---First tab\\nThis is a **first tab**.\\n\\n---Second tab\\nAnd here is another one with `nested markdown`!\\n:::\\n```\\n\\n**Result**\\n\\n:::tabs\\n---First tab\\nThis is a **first tab**.\\n\\n---Second tab\\nAnd here is another one with `nested markdown`!\\n:::\\n\\n#### Tags\\nTags are small bubbles containing text, often buzzwords.\\n\\n**Example**\\n\\n```markdown\\n:::tags colors=\\"red,blue,purple\\"\\nthis,is,what,tags,look,like\\n:::\\n```\\n\\n**Result**\\n\\n:::tags colors=\\"red,blue,purple\\"\\nthis,is,what,tags,look,like\\n:::\\n\\n**Parameters**\\n\\n| Name | Description | Default |\\n|---|---|---|\\n| colors | The comma-separated colors of the tags. There can be less colors than the amount of tags, the component will simply alternate the color usage. Supported values are  `red`,`magenta`, `purple`, `blue`, `cyan`, `teal`, `green`, `gray`, `cool-gray`, `warm-gray`, `high-contrast`, `outline`.  | `outline` |"}]},{"title":"Deployment","content":[{"title":"GitHub Pages","content":"# Deployment - GitHub Pages\\n\\nDeploying on [GitHub pages](https://pages.github.com/) is very simple since magidoc generates static files by default.\\n\\n> If you are looking for a concrete example, this website is built with Magidoc and hosted on GitHub pages with a custom domain name. See the setup [here](https://github.com/magidoc-org/magidoc/tree/main/docs).\\n\\n## Magidoc configuration\\n\\nFirst thing, you need to set up your magidoc configuration to work on your repository\'s deployed URL.\\n\\n```javascript\\nimport path from \'path\'\\n\\nexport default {\\n  website: {\\n    // ...\\n    // We will need some mandatory static assets\\n    staticAssets: path.join(__dirname, \'assets\'),\\n    options: {\\n      // You need to specify the base path of your github pages root\\n      // Example: `/magidoc-org/magidoc`\\n      siteRoot: \'/<user|organization>/<repo>\',\\n    },\\n    // ...\\n  },\\n}\\n```\\n\\n## Static assets\\nSince GitHub tries to use Jekyll by default to render your website, we need to disable Jekyll. You can do this by creating an empty file named `.nojekyll` inside the `assets` folder. \\n\\n```\\nassets\\n\u2514\u2500\u2500 .nojekyll\\nmagidoc.mjs\\n```"},{"title":"Apache","content":"# Deployment - Apache\\n\\n[Apache HTTP Server](https://httpd.apache.org/) is one of the most popular implementation of HTTP server across the web. Deployment of static websites is natural on Apache, but there is a small configuration required to make it work well.\\n\\n## Folder structure\\n\\nPut the Magidoc output content inside your HTML directory on your server, typically `/var/www/html`.\\n\\nBe careful not to forget anything, otherwise your website will not work.\\n\\n```\\n/var/www/html\\n\u251C\u2500\u2500 _app\\n\u2502   \u2514\u2500\u2500 ...\\n\u251C\u2500\u2500 introduction\\n\u2502   \u2514\u2500\u2500 welcome.html\\n\u251C\u2500\u2500 ...\\n\u2514\u2500\u2500 index.html\\n```\\n\\nIf you want your website to be hosted on a non-root URL (e.g. `/docs`), make sure to set the `siteRoot` option in the [magidoc configuration](/cli/magidoc-configuration).\\n\\n## Apache Configuration\\n\\nSince Magidoc uses clean URLs to work, you need to enable [MultiViews](https://www.youtube.com/watch?v=Tp-WacMe7yA) inside your configuration. This allows pages to load even if the file extension is omitted (e.g. `/introduction` rather than `/introduction.html`).\\n"},{"title":"Others","content":"# Deployment - Others\\n\\nNaturally, you can deploy Magidoc websites on any HTTP server provider you desire, not only on the ones listed before.\\n\\n> If you want to help others get around deploying Magidoc websites, you are perfectly welcome to open a [Pull Request](https://github.com/magidoc-org/magidoc/pulls) to explain how to achieve it with other providers.\\n\\n## Quick links\\n\\nHere is a small list of example of where and how you can host static websites on different platforms:\\n\\n- [Netlify](https://httpd.apache.org/)\\n- [Heroku](https://medium.com/@agavitalis/how-to-deploy-a-simple-static-html-website-on-heroku-492697238e48)\\n- [AWS S3](https://docs.aws.amazon.com/AmazonS3/latest/userguide/HostingWebsiteOnS3Setup.html)\\n\\n## Important things\\n\\n1. When hosting a Magidoc website, you need to configure your http server to use the extension `html` by default if none is provided. This is because Magidoc uses clean URLs for its page (e.g. `/introduction` instead of `/introduction.html`). Many providers have this configured by default, but not all of them.\\n2. When hosting a website on a non-root URL (e.g. `https://example.com/docs`), you need to specify the `siteRoot` property inside the [magidoc configuration](/cli/magidoc-configuration).\\n"},{"title":"Google Indexing","content":"# Deployment - Google Indexing\\n\\nIf you wish your website to be indexed and searchable on Google, you will need to provide a custom [robot.txt](https://developers.google.com/search/docs/advanced/robots/intro), which allows your website to be crawled by search engines.\\n\\n## Magidoc configuration\\n\\nYou need to use `staticAssets` to provide a `robot.txt`.\\n\\n```javascript\\nimport path from \'path\'\\n\\nexport default {\\n  website: {\\n    // ...\\n    staticAssets: path.join(__dirname, \'assets\'),\\n    // ...\\n  },\\n}\\n```\\n\\n## Robot file\\n\\nOnce this is done, you need to create a `robot.txt` file inside the `assets` directory.\\n\\n```\\nassets\\n\u2514\u2500\u2500 robot.txt\\nmagidoc.mjs\\n```\\n\\nThe minimal content you can put in there is the following, which allows Google to crawl everything on your website.\\n\\n```\\nUser-agent: *\\nDisallow:\\n```\\n"}]},{"title":"Plugins","content":[{"title":"Introduction","content":"# Introduction\\n\\nThis section contains plugins that can be used within any javascript application, wether they are built for NodeJS, Svelte or any other frontend framework. They are completely independent of the Magidoc ecosystem.\\n\\nEach of these plugins also include TypeScript definitions.\\n"},{"title":"GraphQL Query Generator","content":"# GraphQL Query Generator\\n\\n:::tags\\nstandalone, plugin, node, browser\\n:::\\n\\nThe GraphQL Query Generator plugin does exactly as its name suggests: it automatically builds GraphQL queries, variables and responses from a root query type.\\n\\nGenerating GraphQL queries requires complex logic that is abstracted by this library. It supports parameter generation, duplicate names, union types and much more.\\n\\n## Example\\n\\nHere is a sample query generated by the plugin.\\n\\n**Query**\\n\\n```graphql\\nquery getPerson($delay: Int, $delay2: Int) {\\n  person {\\n    name\\n    age(delay: $delay)\\n    friends {\\n      name\\n      age(delay: $delay2)\\n    }\\n  }\\n}\\n```\\n\\n**Variables**\\n\\n```json\\n{\\n  \\"delay\\": 42,\\n  \\"delay2\\": 42\\n}\\n```\\n\\n**Response**\\n\\n```javascript\\n{\\n  \\"person\\": {\\n    \\"name\\": \\"A name\\",\\n    \\"age\\": 36,\\n    \\"friends\\": [\\n      {\\n        \\"name\\": \\"A name\\",\\n        \\"age\\": 36\\n      }\\n    ]\\n  }\\n}\\n```\\n\\n## Install\\n\\nThis plugin requires [GraphQL.js](https://www.npmjs.com/package/graphql) as a peer dependency.\\n\\n```shell-session\\n$ pnpm install -D @magidoc/plugin-query-generator graphql\\n```\\n\\n## Usage\\n\\nHere is a sample usage with TypeScript that would generate the [above query](#example).\\n\\n```typescript\\nimport generateGraphQLQuery, {\\n  NullGenerationStrategy,\\n  QueryType,\\n} from \'@magidoc/plugin-query-generator\'\\nimport { buildClientSchema, type IntrospectionQuery } from \'graphql\'\\nimport schemaJson from \'_schema.json\'\\n\\n// Use GraphQL.js to build the schema\\nconst schema = buildClientSchema(schemaJson as unknown as IntrospectionQuery)\\nconst personField = schema.getQueryType()?.getFields()[\'person\']!!\\n\\nconst context = {\\n  queryName: \'getPerson\',\\n  queryType: QueryType.QUERY,\\n  maxDepth: 3,\\n  nullGenerationStrategy: NullGenerationStrategy.NEVER_NULL,\\n  factories: {},\\n}\\n\\n// Generate a query with variables\\nconst query = generateGraphQLQuery(personField, context)\\n// Generates a sample response\\nconst response = generateGraphQLResponse(personField, context)\\n\\nconsole.log(query)\\nconsole.log(response)\\n```\\n\\n## Factories\\n\\nFactories are the most important part of the configuration. It allows customization of how the plugin generates the random values used as [query variables](https://graphql.org/learn/queries/#variables). The plugin offers many [default factories](https://github.com/pelletier197/magidoc/blob/main/packages/plugins/query-generator/src/generator/defaultFactories.ts). Each of these factories can be overwritten and custom ones can be added.\\n\\nFactories can be used to provide custom generators for [scalar types](https://graphql.org/learn/schema/#scalar-types) and [input values](https://graphql.org/learn/schema/#input-types).\\n\\n### Custom scalar types\\n\\nMany GraphQL APIs implement [custom scalars](https://www.apollographql.com/docs/apollo-server/schema/custom-scalars/). Since the plugin cannot automatically determine what is backing these scalars, a custom factory is required for them.\\n\\nFor instance, given schema has a scalar named `OddNumber`, representing any odd number.\\n\\n```graphql\\nscalar OddNumber\\n```\\n\\nThe factory below could be provided.\\n\\n```typescript\\nconst result = generateGraphQLQuery(field, {\\n  factories: {\\n    OddNumber: () => 5,\\n  },\\n})\\n```\\n\\n### Factory key\\n\\nThe key for the GraphQL factory object uses glob syntax to determine which factory to use. The factories are used in order of specificity, from the most specific to the least specific. Only the most specific factory will be used to generate the value.\\n\\nHere are examples of factories going from the most specific to the least specific.\\n\\n```typescript\\nconst result = generateGraphQLQuery(field, {\\n  factories: {\\n    // A specific path in the request in the format `field.path$argument.path`\\n    oddNumbersField$argument: () => 3,\\n    // An argument by name. For instance, if the argument `birthDate` was used often in your API\\n    // You could specify a similar value for all `birthDate` fields.\\n    argument: () => [3],\\n    // Other matchers on type name\\n    \'[OddNumber!]!\': () => [5],\\n    \'[OddNumber!]\': () => [7],\\n    \'OddNumber!\': () => 9,\\n    OddNumber: () => 11,\\n    \'*Number\': () => 13,\\n  },\\n})\\n```\\n\\n#### Type unwrapping\\n\\nThe query generator uses type unwrapping to try to find a factory in all the provided values. This means that you generally don\'t need to provide a factory for a `[OddNumber!]!`, because a factory `OddNumber` will be used for all possible wrappings of the type: `OddNumber`, `OddNumber!`, `[OddNumber!]` and `[OddNumber!]!`.\\n\\n### Factory context\\n\\nSome GraphQL types, like `String`, are used widely within most GraphQL APIs. You may desire to return a different value for these types based on the context where they are used. This can be achieved using the `context` parameter provided in the factory function.\\n\\n```typescript\\nimport generateGraphQLQuery, { type QueryType } from \'@magidoc/plugin-query-generator\'\\nconst result = generateGraphQLQuery(field, {\\n  factories: {\\n    String: (context: GraphQLFactoryContext) => {\\n      switch(context.targetName.toLowerCase()) {\\n        case: \'email\':\\n          return \'some-email@mycompany.com\'\\n        case: \'policyName\'\\n          return \'Policy Name\'\\n        default: context.defaultFactory ? context.defaultFactory.provide() : \'abc\'\\n      }\\n    },\\n  },\\n})\\n```\\n\\nThe parameters found in the context object and their description are described below.\\n\\n<!-- prettier-ignore -->\\n| Parameter      | Description |\\n|----------------|-------------|\\n| targetName     | Either the argument name or the nested field name. |\\n| defaultValue   | The default value provided in the GraphQL Schema. You may decide to use it by providing a factory that returns the default value if it is non-null. |\\n| defaultFactory | The default factory that exists for this type. Can be useful if you want to perform custom actions and fallback to the default provider. Note that this factory is always the factory for a scalar value. Thus, if you create a factory for a `[String!]!`, then the default factory will return a String, not an array of strings. You will be required to return an array yourself. This property is only available when overriding the default generators. |\\n| randomFactory  | The random factory that would be used to generate this object. This can be useful to fallback on a random object. This is only available when generating input values. |\\n| depth          | The current depth in the field generation. This does not include the depth of the current parameter. |\\n| path           | Path in the query to the current parameter. |\\n"},{"title":"Rollup Fetch-GraphQL-Schema","content":"# Rollup Fetch-GraphQL-Schema\\n\\n:::tags\\nstandalone, plugin, rollup, vite\\n:::\\n\\nThis rollup plugin fetches the GraphQL Schema required by Magidoc Plugins to build your website documentation. It performs a full [GraphQL Introspection Query](https://graphql.org/learn/introspection/) and stores the result on the file-system. This approach keeps your documentation independent from the actual API.\\n\\n:::notification type=\\"info\\"\\nThis plugin is also compatible with [ViteJS](https://vitejs.dev/), which is used by SvelteKit.\\n:::\\n\\n## Install\\n\\nFirst, add the module to your project.\\n\\n```shell-session\\n$ pnpm install -D @magidoc/rollup-plugin-fetch-gql-schema\\n```\\n\\nThen, add the plugin to your `Rollup/ViteJS` configuration. Here is an example for a `svelte.config.js`.\\n\\n```javascript\\nimport fetchGraphQLSchema from \'@magidoc/rollup-plugin-fetch-gql-schema\'\\n\\nexport default {\\n  kit: {\\n    vite: {\\n      plugins: [\\n        fetchGraphQLSchema({\\n          url: \'https://your-api-url.com\',\\n        }),\\n      ],\\n    },\\n  },\\n}\\n```\\n\\n## Configuration\\n\\nConfigurations are available for the plugin to change the behavior of the introspection query. Here is the full configuration example and its default values.\\n\\n```javascript\\nfetchGraphQLSchema({\\n  /**\\n   * Your API URL.\\n   */\\n  url: \'https://your-graphql-api-url.com/graphql\',\\n\\n  /**\\n   * The HTTP Method to use.\\n   *\\n   * @default \'POST\'\\n   */\\n  method: \'POST\',\\n\\n  /**\\n   * Some APIs do not follow the GraphQL.js standard, so the introspection may be invalid for your API.\\n   * If this happens, you can specify a different introspection query to use.\\n   */\\n  query: \'<introspection-query>\',\\n\\n  /**\\n   * Optional headers to provide in the request.\\n   *\\n   * @default {}\\n   */\\n  headers: {},\\n\\n  /**\\n   * The target path where to put the introspection query result.\\n   * This defaults to the src asset directory of SvelteKit, so that the asset can be imported directly.\\n   *\\n   * @default \'src/_schema.json\'\\n   */\\n  target: \'src/_schema.json\',\\n})\\n```\\n"},{"title":"Rollup Parse-GraphQL-Schema","content":"# Rollup Parse-GraphQL-Schema\\n\\n:::tags\\nstandalone, plugin, rollup, vite\\n:::\\n\\nSimilar to what the [Rollup Fetch Plugin](/plugins/rollup-fetch-graphql-schema) does, the Rollup Parse Plugin generates an introspection schema from your [SDL files](https://www.apollographql.com/docs/apollo-server/schema/schema/#the-schema-definition-language) and stores the result on the file-system. This approach is usually simpler than interacting with a live endpoint if your API uses Authentication.\\n\\n:::notification type=\\"info\\"\\nThis plugin is also compatible with [ViteJS](https://vitejs.dev/), which is used by SvelteKit.\\n:::\\n\\n## Install\\n\\nFirst, add the module to your project.\\n\\n```shell-session\\n$ pnpm install -D @magidoc/rollup-plugin-parse-gql-schema\\n```\\n\\nThen, add the plugin to your `Rollup/ViteJS` configuration. Here is an example for a `svelte.config.js`.\\n\\n```javascript\\nimport parseGraphQLSchema from \'@magidoc/rollup-plugin-parse-gql-schema\'\\n\\nexport default {\\n  kit: {\\n    vite: {\\n      plugins: [\\n        parseGraphQLSchema({\\n          paths: [\'schema/**/*.graphqls\'],\\n        }),\\n      ],\\n    },\\n  },\\n}\\n```\\n\\n## Configuration\\n\\nSome configuration is available as well for the plugin.\\n\\n```javascript\\nparseGraphQLSchema({\\n  /**\\n   * A mandatory list of paths where to the SDL files are located. Glob syntax is supported.\\n   */\\n  paths: [\'schema/**/*.graphqls\'],\\n\\n  /**\\n   * The target path where to put the introspection result.\\n   * This defaults to the src asset directory of SvelteKit, so that the asset can be imported directly.\\n   *\\n   * @default \'src/_schema.json\'\\n   */\\n  target: \'src/_schema.json\',\\n})\\n```\\n"}]},{"title":"Svelte Plugins","content":[{"title":"Introduction","content":"# Introduction\\n\\nThis section contains Svelte-specific plugins that can be used within any Svelte/SvelteKit applications. These plugins can also be used outside of the Magidoc ecosystem.\\n\\nEach of these plugins also include TypeScript definitions.\\n"},{"title":"PrismJS","content":"# PrismJS\\n\\n:::tags\\nstandalone, plugin, svelte\\n:::\\n\\nA simple Svelte plugin built with TypeScript to display code inside the browser, using [PrismJS](https://www.npmjs.com/package/prismjs).\\n\\n## Install\\n\\nPrismJS is required as a peer dependency so you can use the themes and languages provided.\\n\\n```shell-session\\n$ pnpm install -D @magidoc/plugin-svelte-prismjs prismjs @types/prismjs\\n```\\n## Basic Usage\\n\\nThe plugin exposes attributes to provide the source and the language. Attributes to display line numbers and a copy button are also available.\\n\\n```svelte\\n<script lang=\\"ts\\">\\n  import Prism from \'@magidoc/plugin-svelte-prismjs\'\\n<\/script>\\n\\n<Prism\\n  language={\'javascript\'}\\n  source={`\\n    const x = \'best plugin ever\'\\n    console.log(x)\\n  `}\\n  showLineNumbers\\n  showCopyButton\\n/>\\n```\\n\\n## Install languages\\n\\nPrismJS supports a [ton of languages](https://prismjs.com/#supported-languages) out of the box. You can use any of these languages simply by importing the syntax highlighting. Languages install themselves automatically, but PrismJS must be imported first.\\n\\n```svelte\\n<script lang=\\"ts\\">\\n  import Prism from \'@magidoc/plugin-svelte-prismjs\'\\n  import \'prismjs/components/prism-graphql\'\\n  import \'prism-svelte\' // https://github.com/pngwn/prism-svelte\\n<\/script>\\n```\\n\\n## Themes\\n\\nYou can modify Prism code sections style simply by importing a stylesheet. PrismJS provides many [themes](https://github.com/PrismJS/prism/tree/master/themes) out of the box that you can easily import. Otherwise, there is a wide variety of themes available on the web and even a [theme generator](https://k88hudson.github.io/syntax-highlighting-theme-generator/www/).\\n\\n```svelte\\n<script lang=\\"ts\\">\\n  import Prism from \'@magidoc/plugin-svelte-prismjs\'\\n  import \'prismjs/themes/prism-dark.css\'\\n<\/script>\\n```\\n\\n:::notification type=\\"info\\"\\nThis website uses the PrismJS plugin to display code. If you like the theme used, it is a slightly modified version of the OneDark theme and is available [here](https://github.com/magidoc-org/magidoc/blob/main/packages/starters/carbon-multi-page/src/prism-theme.css).\\n:::\\n"},{"title":"Marked","content":"# Marked\\n\\n:::tags\\nstandalone, plugin, svelte\\n:::\\n\\nSvelte-Marked is a markdown parser that renders into Svelte components. It supports [Github Flavored Markdown](https://github.github.com/gfm/) out of the box (tables, lists, raw HTML, etc.).\\n\\nEach component renderer can be overwritten to customize its style and [extensions](https://github.com/markedjs/marked-extension-template) can be registered to support a more advanced markdown syntax.\\n\\n## Install\\n\\n[MarkedJS](https://github.com/markedjs/marked) is required as a peer dependency if you want to register custom extensions or components so you can get access to typing.\\n\\n```shell-session\\n$ pnpm install -D @magidoc/plugin-svelte-marked marked @types/marked\\n```\\n\\n## Basic Usage\\n\\nThe library renders your markdown in plain HTML by default.\\n\\n```svelte\\n<script lang=\\"ts\\">\\n  import Markdown from \'@magidoc/plugin-svelte-marked\'\\n<\/script>\\n\\n<Markdown\\n  source={`\\n# Setup\\nHere are the steps to set up svelte-marked plugin\\n1. Install it\\n2. Enjoy\\n    - If you enjoyed, make sure to star the repo!\\n`}\\n/>\\n```\\n\\n## Custom renderers\\n\\nChances are that you do not want to render your website to plain HTML, but want to customize the components. To do so, simply provide a svelte component in the `renderers` parameter.\\n\\n> For reference on how to implement each component, see the [default implementations](https://github.com/magidoc-org/magidoc/tree/main/packages/plugins/svelte-marked/src/lib/markdown/components).\\n\\n\\n**Example** \\n\\nFirst, we are going to create a custom component.\\n\\n```svelte\\n<!-- MarkdownImage.svelte -->\\n<script lang=\\"ts\\">\\n  import type { marked } from \'marked\'\\n  import type { MarkdownOptions, Renderers } from \'../markedConfiguration\'\\n\\n  export let token: marked.Tokens.Image\\n  export const options: MarkdownOptions = undefined\\n  export const renderers: Renderers = undefined\\n<\/script>\\n\\n<img\\n  src={token.href}\\n  title={token.title}\\n  alt={token.text}\\n  class=\\"custom-image\\"\\n/>\\n\\n<style>\\n  .custom-image {\\n    max-width: 50%;\\n  }\\n</style>\\n```\\n\\nAnd then register it to customize the rendering of `img`.\\n\\n```svelte\\n<!-- index.svelte -->\\n<script lang=\\"ts\\">\\n  import Markdown from \'@magidoc/plugin-svelte-marked\'\\n  import MarkdownImage from \'./MarkdownImage.svelte\'\\n<\/script>\\n\\n<Markdown\\n  source={`\\nAmazing image:\\n![Look at this image](https://lh3.googleusercontent.com/2hDpuTi-0AMKvoZJGd-yKWvK4tKdQr_kLIpB_qSeMau2TNGCNidAosMEvrEXFO9G6tmlFlPQplpwiqirgrIPWnCKMvElaYgI-HiVvXc=w600)\\n`}\\n  renderers={{\\n    img: MarkdownImage,\\n  }}\\n/>\\n```\\n\\nSee the [tokenizer reference](https://marked.js.org/using_pro#tokenizer) for a full list of default components that can be overwritten.\\n\\n## Extensions\\n\\nThe marked plugin comes with a `container` extension that is **not registered by default**. The container extension will require you to define the components that will be rendered, as well as a function to convert the container data into tokens.\\n\\n**Example**\\n\\nFirst thing to do is to create our custom component that we will name `BackgroundColor`.\\n\\n```svelte\\n<!-- BackgroundColor.svelte -->\\n<script lang=\\"ts\\">\\n  import {\\n    MarkdownTokens,\\n    type MarkdownOptions,\\n    type Renderers,\\n  } from \'@magidoc/plugin-svelte-marked\'\\n  import type { marked } from \'marked\'\\n\\n  export let token: marked.Tokens.Generic & {\\n    type: \'background-color\'\\n    color: string\\n    raw: string\\n    tokens: marked.Token[]\\n  }\\n\\n  export let renderers: Renderers\\n  export let options: MarkdownOptions\\n<\/script>\\n\\n<div style={`background-color: ${token.color}`}>\\n  <!-- This allows to render markdown recursively, in a way that the text inside your container can also be markdown! -->\\n  <MarkdownTokens tokens={token.tokens} {renderers} {options} />\\n</div>\\n```\\n\\nOnce we have our component, we only have to register our extension, and pass the component as its renderer.\\n\\n```svelte\\n<script lang=\\"ts\\">\\n  import BackgroundColor from \'./BackgroundColor.svelte\'\\n\\n  import Markdown, {\\n    extensions,\\n    type TokenExtractionParameters,\\n  } from \'@magidoc/plugin-svelte-marked\'\\n  import { marked } from \'marked\'\\n\\n  // Step 1, register our custom extension\\n  marked.use({\\n    extensions: [\\n      extensions.containerExtension((params: TokenExtractionParameters) => {\\n        if (params.type === \'background-color\') {\\n          // This will become the `token` parameter of our component\\n          return {\\n            type: \'background-color\', // This is the `renderer` name.\\n            raw: params.raw,\\n            color: params.options[\'color\'] ?? \'red\',\\n            // This empty array indicates the container plugin that you wish \\n            // to parse the content of of the container as markdown\\n            // It will be automatically populated if it is present.\\n            // If you do not wish to render the content as markdown, set this to null or undefined\\n            tokens: [],\\n          }\\n        }\\n\\n        return null\\n      }),\\n    ],\\n  })\\n<\/script>\\n\\n<Markdown\\n  source={`\\n:::background-color color=\\"lightgray\\"\\nLook at this gray background with **internal markdown support**!!\\n:::\\n`}\\n  renderers={{\\n    \'background-color\': BackgroundColor,\\n  }}\\n/>\\n```\\n"}]}]',f='[{"label":"Github","href":"https://github.com/magidoc-org/magidoc"},{"group":"Demo","label":"Carbon-Multi-Page","href":"https://magidoc-carbon-multi-page.netlify.app/welcome"},{"group":"Articles","label":"Medium tutorial","kind":"medium","href":"https://medium.com/@sunnypelletier01/autogenerate-graphql-documentation-with-magidoc-53235f5d6dec"},{"group":"Articles","label":"Why static documentation?","kind":"article","href":"https://dev.to/pelletier197/why-you-need-static-documentation-for-your-graphql-api-19ol"},{"group":"Others","label":"Product Hunt","kind":"article","href":"https://www.producthunt.com/posts/magidoc"}]',y='{"description":"Fast and highly customizable GraphQL documentation generator","og:description":"Fast and highly customizable GraphQL documentation generator","keywords":"svelte,sveltekit,svelte-kit,prismjs,markedjs,marked,graphql,documentation,docs,static,javascript,nodejs","author":"Magidoc-org","og:title":"Magidoc","og:type":"article","og:image":"https://raw.githubusercontent.com/magidoc-org/magidoc/main/logo/logo_full.png"}',b="true",c={APP_TITLE:d,APP_FAVICON:m,PAGES:g,EXTERNAL_LINKS:f,SITE_META:y,MAGIDOC_GENERATE:b};function v(e){return e.get(c)}function k(e,n){return e.getOrDefault(c,n)}export{v as a,k as g,w as t};
